<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chromer&#39;s Blog</title>
  
  
  <link href="http://narutohinata.github.io/atom.xml" rel="self"/>
  
  <link href="http://narutohinata.github.io/"/>
  <updated>2022-03-29T06:09:06.919Z</updated>
  <id>http://narutohinata.github.io/</id>
  
  <author>
    <name>chromer</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>字符和编码</title>
    <link href="http://narutohinata.github.io/2022/03/26/%E5%AD%97%E7%AC%A6%E5%92%8C%E7%BC%96%E7%A0%81/"/>
    <id>http://narutohinata.github.io/2022/03/26/%E5%AD%97%E7%AC%A6%E5%92%8C%E7%BC%96%E7%A0%81/</id>
    <published>2022-03-26T09:26:15.000Z</published>
    <updated>2022-03-29T06:09:06.919Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><!-- 手握锟斤拷，直呼烫烫烫。 --><p>计算机中的存储器唯一可以存储的是bit(0/1)，如果想要在计算机上处理信息，就必须把它按位存储。因此为了将文本表示为数字形式，我们需要构建一个系统来为每一个字符赋予一个独一无二的ID。</p><p>具有这种功能的系统被称为<strong>字符集（Charset</strong>。其实字符集就是一个map，一个字符到表示这个字符的唯一ID[这些Id就被称作<strong>码点</strong>(<strong>code point</strong>)]的映射集合。有了字符集合我们就将文本映射成数字形式。但是需要一个规则用来规定如何在计算机中存储这些数字(使用多少字节?)，于是我们就有了<strong>字符编码(encoding)</strong>。</p><h3 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h3><p>在计算机早期应对的字符场景还很简单(大小写拉丁字母(26 * 2 = 52) + 数字0-9(10) + 一些符号 不超过128个)，因此于1963年发布的ASCII是可以应付当时的场景。</p><p><img src="https://chromer-blog.oss-cn-shanghai.aliyuncs.com/blog/image-20220319234553566-7a392a5b7a2cc1732cf7b30c53275155f1e07969dbffd478ebd8d0a7e675409a.png" alt="image-20220319234553566"></p><p>标准ASCII只用到的1byte的后7位。看下图就可以知道ASCII使用范围是$0x00$ ~ $ 0x7F$。</p><p><img src="https://chromer-blog.oss-cn-shanghai.aliyuncs.com/blog/USASCII_code_chart-9e9c85c0d5f0c819bcf7d61c0cce9152e0e359b2cffe96d2b5507b690edafc20.png" alt=""></p><h3 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h3><p>随着计算机的发展和互联网的普及，计算机需要面对各个国家的语言。此时ASCII很显然无法满足需求了，于是各个国家都发布了自己语言的字符集，我们国家也是在1980年发布了基于ASCII扩展的中文字符集<a href="https://zh.wikipedia.org/wiki/GB_2312"><strong>GB2312</strong></a>。</p><p>于是建立一个涵盖世界上所有文本的编码规范成为了一个迫切的需求。在国际化标准组织和美国几大商业公司合作下，1991年Unicode发布。</p><p>最初的Unicode编码使用16位的编码空间也就是2Byte这样理论上最多可以表示$2^{16}$(即65536)个字符，显然这样要表示世界上所有语言中的字符是远远不够的。后来在Unicode4.0规范中考虑到了这种情况，定义了一组附加字符编码，附加字符编码使用2个16位表示，也就是4byte。目前Unicode编码范围是U+0000~U+10FFFF。</p><p>Unicode将这些码点按照每组$2^{16}$（65536）分组，每组被称为一个<strong>平面</strong>（plane）。一共将这些码点分成了17个平面，Plane0 ~ Plane16。Plane0又被称作基本多文本平面（BMP)，其他平面统称为辅助平面。</p><div class="table-container"><table><thead><tr><th>平面</th><th>范围</th><th>中文名称</th><th>英文名称</th></tr></thead><tbody><tr><td>0号平面（Plane0)</td><td>U+0000 - U+FFFF</td><td>基本多文本平面</td><td>BMP</td></tr><tr><td>1号平面（Plane1)</td><td>U+10000 - U+1FFFF</td><td>多文种补充平面</td><td>SMP</td></tr><tr><td>2号平面(Plane2)</td><td>U+20000 - U+2FFFF</td><td>表意文字补充平面</td><td>SIP</td></tr><tr><td>3号平面(Plane3)</td><td>U+30000 - U+3FFFF</td><td>表意文字第三平面</td><td>TIP</td></tr><tr><td>4号平面~13号平面</td><td>U+40000 - U+DFFFF</td><td>未使用</td><td></td></tr><tr><td>14号平面(Plane14)</td><td>U+E0000 - U+EFFFF</td><td>特别用途补充平面</td><td>SSP</td></tr><tr><td>15号平面(Plane15)</td><td>U+F0000 - U+FFFFF</td><td>保留作为私人使用区（A区）</td><td>PUA-A</td></tr><tr><td>16号平面(Plane16)</td><td>U+100000 - U+10FFFF</td><td>保留作为私人使用区（B区）</td><td>PUA-B</td></tr><tr><td></td><td></td><td></td></tr></tbody></table></div><p><img src="https://chromer-blog.oss-cn-shanghai.aliyuncs.com/blog/image-20220319235230869-4dcab2527238d5c0bdd623f6f8ea4330eb69877a02626bfd8a4cab02f41a1d00.png" alt="image-20220319235230869"></p><h3 id="Unicode编码方案"><a href="#Unicode编码方案" class="headerlink" title="Unicode编码方案"></a>Unicode编码方案</h3><p>Unicode 没有规定字符对应的二进制码如何存储。以汉字“汉”为例，它的 Unicode 码点是 0x6c49，对应的二进制数是 110110001001001，二进制数有 15 位，这也就说明了它至少需要 2 个字节来表示。可以想象，在 Unicode 字典中往后的字符可能就需要 3 个字节或者 4 个字节，甚至更多字节来表示了。</p><p>这就导致了一些问题，计算机怎么知道你这个 2 个字节表示的是一个字符，而不是分别表示两个字符呢？这里我们可能会想到，那就取个最大的，假如 Unicode 中最大的字符用 4 字节就可以表示了，那么我们就将所有的字符都用 4 个字节来表示，不够的就往前面补 0（UTF-32)。这样确实可以解决编码问题，但是却造成了空间的极大浪费，如果是一个英文文档，那文件大小就大出了 3 倍，这显然是无法接受的。</p><p>于是，为了较好的解决 Unicode 的编码问题， UTF-8 和 UTF-16 两种当前比较流行的编码方式诞生了。当然还有一个 UTF-32 的编码方式，也就是上述那种定长编码，字符统一使用 4 个字节，虽然看似方便，但是却不如另外两种编码方式使用广泛。</p><h3 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h3><p>UTF-8 是一个非常惊艳的编码方式，漂亮的<strong>实现了对 ASCII 码的向后兼容</strong>，以保证 Unicode 可以被大众接受。</p><p><strong>UTF-8 是目前互联网上使用最广泛的一种 Unicode 编码方式</strong>，它的最大特点就是<strong>可变长。它可以使用 1 - 4 个字节表示一个字符，根据字符的不同变换长度</strong>。编码规则如下：</p><ol><li>对于单个字节的字符，第一位设为 0，后面的 7 位对应这个字符的 Unicode 码点。因此，对于英文中的 0 - 127 号字符，与 ASCII 码完全相同。这意味着 ASCII 码那个年代的文档用 UTF-8 编码打开完全没有问题。</li><li>对于需要使用 N 个字节来表示的字符（N &gt; 1），第一个字节的前 N 位都设为 1，第 N + 1 位设为 0，剩余的 N - 1 个字节的前两位都设位 10，剩下的二进制位则使用这个字符的 Unicode 码点来填充。</li></ol><p>编码规则如下：</p><div class="table-container"><table><thead><tr><th style="text-align:left">Unicode 十六进制码点范围</th><th style="text-align:left">UTF-8 二进制</th></tr></thead><tbody><tr><td style="text-align:left">0000 0000 - 0000 007F</td><td style="text-align:left">0xxxxxxx</td></tr><tr><td style="text-align:left">0000 0080 - 0000 07FF</td><td style="text-align:left">110xxxxx 10xxxxxx</td></tr><tr><td style="text-align:left">0000 0800 - 0000 FFFF</td><td style="text-align:left">1110xxxx 10xxxxxx 10xxxxxx</td></tr><tr><td style="text-align:left">0001 0000 - 0010 FFFF</td><td style="text-align:left">11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td></tr></tbody></table></div><p>Unicode 和 UTF-8 之间的转换关系表 ( <code>x</code> 字符表示码点占据的位 )如下:</p><div class="table-container"><table><thead><tr><th style="text-align:center">码点的位数</th><th style="text-align:center">码点起值</th><th style="text-align:center">码点终值</th><th style="text-align:center">字节序列</th><th style="text-align:center">Byte 1</th><th style="text-align:center">Byte 2</th><th style="text-align:center">Byte 3</th><th style="text-align:center">Byte 4</th></tr></thead><tbody><tr><td style="text-align:center">7</td><td style="text-align:center">U+0000</td><td style="text-align:center">U+007F</td><td style="text-align:center">1</td><td style="text-align:center"><code>0xxxxxxx</code></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">U+0080</td><td style="text-align:center">U+07FF</td><td style="text-align:center">2</td><td style="text-align:center"><code>110xxxxx</code></td><td style="text-align:center"><code>10xxxxxx</code></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">16</td><td style="text-align:center">U+0800</td><td style="text-align:center">U+FFFF</td><td style="text-align:center">3</td><td style="text-align:center"><code>1110xxxx</code></td><td style="text-align:center"><code>10xxxxxx</code></td><td style="text-align:center"><code>10xxxxxx</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">21</td><td style="text-align:center">U+10000</td><td style="text-align:center">U+1FFFFF</td><td style="text-align:center">4</td><td style="text-align:center"><code>11110xxx</code></td><td style="text-align:center"><code>10xxxxxx</code></td><td style="text-align:center"><code>10xxxxxx</code></td><td style="text-align:center"><code>10xxxxxx</code></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><h4 id="编码过程"><a href="#编码过程" class="headerlink" title="编码过程"></a>编码过程</h4><p>下图展示了中文“我”的UTF-8的编码过程，最终得到的结果是0xE68891</p><p><img src="https://chromer-blog.oss-cn-shanghai.aliyuncs.com/blog/image-20220320174733759-4e87c30dcf657497ade3913b1b7a6fb0c478f49d0e06f39ae13531ed1e06c12e.png" alt="image-20220320174733759"></p><p><img src="https://chromer-blog.oss-cn-shanghai.aliyuncs.com/blog/image-20220326225545448-e03623515fcac258c665e877a9acff55d58af34568edb349df8d9b4fa2ebe60d.png" alt="image-20220326225545448"></p><h3 id="UTF-16"><a href="#UTF-16" class="headerlink" title="UTF-16"></a>UTF-16</h3><p>UTF-16 编码介于 UTF-32 与 UTF-8 之间，同时<strong>结合了定长和变长两种编码方法的特点</strong>。它的编码规则很简单：<strong>基本平面的字符占用 2 个字节，辅助平面的字符占用 4 个字节</strong>。也就是说，UTF-16 的编码长度要么是 2 个字节（U+0000 到 U+FFFF），要么是 4 个字节（U+010000 到 U+10FFFF）。那么问题来了，当我们遇到两个字节时，到底是把这两个字节当作一个字符还是与后面的两个字节一起当作一个字符呢？</p><p>这里有一个很巧妙的地方，在基本平面内，从 U+D800 到 U+DFFF ($2^{11}$)是一个空段，即这些码点不对应任何字符。因此，这个空段可以用来映射辅助平面的字符。</p><p>辅助平面的字符位共有 $2^{20}$ 个，因此表示这些字符至少需要 20 个二进制位。UTF-16 将这 20 个二进制位分成两半，前 10 位映射在 U+D800 到 U+DBFF（空间大小 $2^{10}$），称为高位（H），后 10 位映射在 U+DC00 到 U+DFFF（空间大小 $2^{10}$），称为低位（L）。这意味着，一个辅助平面的字符，被拆成两个基本平面的字符表示。</p><p>因此，当我们遇到两个字节，发现它的码点在 U+D800 到 U+DBFF 之间，就可以断定，紧跟在后面的两个字节的码点，应该在 U+DC00 到 U+DFFF 之间，这四个字节必须放在一起解码。</p><h4 id="编码过程-1"><a href="#编码过程-1" class="headerlink" title="编码过程"></a>编码过程</h4><p>下面以古汉字“𠮷”为例，展示下UTF-16编码过程。</p><p><img src="https://chromer-blog.oss-cn-shanghai.aliyuncs.com/blog/image-20220328233422693-815f38585a9531d5dce12920fda936382673ba6981bc5d2c1d7bbd71a4afe848.png" alt="image-20220328233422693" style="zoom:50%;" /></p><h4 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h4><p>我们到Vscode里验证下结果</p><p><img src="https://chromer-blog.oss-cn-shanghai.aliyuncs.com/blog/image-20220327171846035-a11a95fe63bd2cf780e7e7955e5a0c381d66c1b6a3eafb5b52a58f3a39067dc0.png" alt="image-20220327171846035"></p><p>好像有点不对劲，我们看到多了两个字节0xFE和0xFF，这两个字节是干什么的呢？其实这两个字节是用来标识字节序的，有个官方称呼叫<strong>BOM</strong>(byte-order mark)。</p><p>其中<strong>UTF-16 BE（大端序）</strong> BOM为<code>0xFE 0xFF</code>， <strong>UTF-16 LE</strong>（小端序）BOM为<code>0xFF 0xFE</code>。</p><p>另外说一下 UTF-8也有BOM <code>0xEF 0xBB 0xBF</code> (其实UTF-8并不需要BOM，尽管 Unicode 标准允许在 UTF-8 中使用 BOM。)</p><blockquote><p>字节序</p><p>这里介绍下字节序，字节序用来表示多字节数据在内存中或者网络传输中各字节的存储顺序<img src="https://chromer-blog.oss-cn-shanghai.aliyuncs.com/blog/560px-Big-Endian.svg-29beb7099d30f478979a724fbd8e5daa1eb92a6cad5fd709b06e88086dc16d09.png" alt="560px-Big-Endian.svg" style="zoom:50%;" /><img src="https://chromer-blog.oss-cn-shanghai.aliyuncs.com/blog/560px-Little-Endian.svg-0cf354757d06cf168d04859e0dd43a9d9f4a85d74ddeb1665020e05a2124e1fb.png" alt="560px-Little-Endian.svg" style="zoom:50%;" /></p></blockquote><h3 id="JavaScript中字符函数的坑点"><a href="#JavaScript中字符函数的坑点" class="headerlink" title="JavaScript中字符函数的坑点"></a>JavaScript中字符函数的坑点</h3><p>当字符串中字符都在基本多文本平面范围外，String的某些方法会得到一个令人意外的值。下面还是以下面古汉字“𠮷”为例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** String.prototype.length获取的并不是字符个数而是code unit的长度。</span></span><br><span class="line"><span class="comment">    一个码元（code unit)是字符编码系统的基本部分，类似 UTF-8的码元是8bit，UTF-16的码元是16bit。</span></span><br><span class="line"><span class="comment">    因为“𠮷”的码点在BMP之外，所以根据UTF-16编码规则，它需要2个16bit来编码，所以这里的结果是2。 **/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;𠮷&quot;</span>.length); </span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;\u20BBF&#x27;</span> === <span class="string">&#x27;𠮷&#x27;</span>);</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;𠮷&quot;</span>.charCodeAt(<span class="number">0</span>));</span><br><span class="line"><span class="comment">// 55362 (0xD842)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码表示，JavaScript 认为字符的长度是 2，取到的第一个字符的码点是 0xDB34。这些结果都不正确！</p><p>解决这个问题，必须对码点做一个判断，然后手动调整。下面是正确的遍历字符串的写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (++index &lt; length) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">if</span> (charCode &gt;= <span class="number">0xD800</span> &amp;&amp; charCode &lt;= <span class="number">0xDBFF</span>) &#123;</span><br><span class="line">    output.push(character + string.charAt(++index));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    output.push(character);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似的问题存在于所有的 JavaScript 字符操作函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.replace()</span><br><span class="line"><span class="built_in">String</span>.prototype.substring()</span><br><span class="line"><span class="built_in">String</span>.prototype.slice()</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>上面的函数都只对 2 字节的码点有效。要正确处理 4 字节的码点，就必须逐一部署自己的版本，判断一下当前字符的码点范围。</p><h3 id="ECMAScript-6-中对-Unicode-的扩展"><a href="#ECMAScript-6-中对-Unicode-的扩展" class="headerlink" title="ECMAScript 6 中对 Unicode 的扩展"></a>ECMAScript 6 中对 Unicode 的扩展</h3><h4 id="字符的-Unicode-表示法"><a href="#字符的-Unicode-表示法" class="headerlink" title="字符的 Unicode 表示法"></a>字符的 Unicode 表示法</h4><p>ES6 加强了对 Unicode 的支持，允许采用\uxxxx 形式表示一个字符，其中 xxxx 表示字符的 Unicode 码点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;\u0061&quot;</span></span><br><span class="line"><span class="comment">// &quot;a&quot;</span></span><br></pre></td></tr></table></figure><p>但是，这种表示法只限于码点在\u0000~\uFFFF 之间的字符。超出这个范围的字符，必须用两个双字节的形式表示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;\uD842\uDFB7&quot;</span></span><br><span class="line"><span class="comment">// &quot;𠮷&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;\u20BB7&quot;</span></span><br><span class="line"><span class="comment">// &quot;₻7&quot;</span></span><br></pre></td></tr></table></figure><p>上面代码表示，如果直接在\u 后面跟上超过 0xFFFF 的数值（比如\u20BB7），JavaScript 会理解成\u20BB+7。所以会显示一个其他字符，后面跟着一个 7。</p><p>ES6 对这一点做出了改进，只要将码点放入大括号，就能正确解读该字符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;\u&#123;20BB7&#125;&quot;</span></span><br><span class="line"><span class="comment">// &quot;𠮷&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;\u&#123;41&#125;\u&#123;42&#125;\u&#123;43&#125;&quot;</span></span><br><span class="line"><span class="comment">// &quot;ABC&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hello = <span class="number">123</span>;</span><br><span class="line">hell\u&#123;6F&#125; <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;\u&#123;1F680&#125;&#x27;</span> === <span class="string">&#x27;\uD83D\uDE80&#x27;</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>上面代码中，最后一个例子表明，大括号表示法与四字节的 UTF-16 编码是等价的。</p><p>有了这种表示法之后，JavaScript 共有 6 种方法可以表示一个字符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;\z&#x27;</span> === <span class="string">&#x27;z&#x27;</span>  <span class="comment">// true</span></span><br><span class="line"><span class="string">&#x27;\172&#x27;</span> === <span class="string">&#x27;z&#x27;</span> <span class="comment">// true</span></span><br><span class="line"><span class="string">&#x27;\x7A&#x27;</span> === <span class="string">&#x27;z&#x27;</span> <span class="comment">// true</span></span><br><span class="line"><span class="string">&#x27;\u007A&#x27;</span> === <span class="string">&#x27;z&#x27;</span> <span class="comment">// true</span></span><br><span class="line"><span class="string">&#x27;\u&#123;7A&#125;&#x27;</span> === <span class="string">&#x27;z&#x27;</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="字符串的遍历器接口"><a href="#字符串的遍历器接口" class="headerlink" title="字符串的遍历器接口"></a>字符串的遍历器接口</h4><p>ES6 为字符串添加了遍历器接口，使得字符串可以被 for…of 循环遍历。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> codePoint <span class="keyword">of</span> <span class="string">&#x27;foo&#x27;</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(codePoint)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;f&quot;</span></span><br><span class="line"><span class="comment">// &quot;o&quot;</span></span><br><span class="line"><span class="comment">// &quot;o&quot;</span></span><br></pre></td></tr></table></figure><p>除了遍历字符串，这个遍历器最大的优点是可以识别大于 0xFFFF 的码点，传统的 for 循环无法识别这样的码点。</p><blockquote><p>REPLACEMENT CHARACTER    <a href="https://unicode-explorer.com/c/FFFD">�</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="built_in">String</span>.fromCodePoint(<span class="number">0x20BB7</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; text.length; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(text[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;�&quot;</span></span><br><span class="line"><span class="comment">// &quot;�&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> text) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;𠮷&quot;</span></span><br></pre></td></tr></table></figure><p>上面代码中，字符串 text 只有一个字符，但是 for 循环会认为它包含两个字符（都不可打印），而 for…of 循环会正确识别出这一个字符。</p><h4 id="直接输入-U-2028-和-U-2029"><a href="#直接输入-U-2028-和-U-2029" class="headerlink" title="直接输入 U+2028 和 U+2029"></a>直接输入 U+2028 和 U+2029</h4><p>JavaScript 字符串允许直接输入字符，以及输入字符的转义形式。举例来说，“中”的 Unicode 码点是 U+4e2d，你可以直接在字符串里面输入这个汉字，也可以输入它的转义形式\u4e2d，两者是等价的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;中&#x27;</span> === <span class="string">&#x27;\u4e2d&#x27;</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>但是，JavaScript 规定有 5 个字符，不能在字符串里面直接使用，只能使用转义形式。</p><ul><li>U+005C：反斜杠（reverse solidus)</li><li>U+000D：回车（carriage return）</li><li>U+2028：行分隔符（line separator）</li><li>U+2029：段分隔符（paragraph separator）</li><li>U+000A：换行符（line feed）</li></ul><p>举例来说，字符串里面不能直接包含反斜杠，一定要转义写成\或者\u005c。</p><p>这个规定本身没有问题，麻烦在于 JSON 格式允许字符串里面直接使用 U+2028（行分隔符）和 U+2029（段分隔符）。这样一来，服务器输出的 JSON 被 JSON.parse 解析，就有可能直接报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> json = <span class="string">&#x27;&quot;\u2028&quot;&#x27;</span>;</span><br><span class="line"><span class="built_in">JSON</span>.parse(json); <span class="comment">// 可能报错</span></span><br></pre></td></tr></table></figure><p>JSON 格式已经冻结（RFC 7159），没法修改了。为了消除这个报错，ES2019 允许 JavaScript 字符串直接输入 U+2028（行分隔符）和 U+2029（段分隔符）。</p><p>const PS = eval(“‘\u2029’”); 根据这个提案，上面的代码不会报错。</p><p>注意，模板字符串现在就允许直接输入这两个字符。另外，正则表达式依然不允许直接输入这两个字符，这是没有问题的，因为 JSON 本来就不允许直接包含正则表达式。</p><h4 id="JSON-stringify-的改造"><a href="#JSON-stringify-的改造" class="headerlink" title="JSON.stringify() 的改造"></a>JSON.stringify() 的改造</h4><p>根据标准，<strong>JSON 数据必须是 UTF-8 编码</strong>。但是，现在的 JSON.stringify()方法有可能返回不符合 UTF-8 标准的字符串。</p><p>具体来说，UTF-8 标准规定，0xD800 到 0xDFFF 之间的码点，不能单独使用，必须配对使用。比如，\uD834\uDF06 是两个码点，但是必须放在一起配对使用，代表字符 𝌆。这是为了表示码点大于 0xFFFF 的字符的一种变通方法。单独使用\uD834 和\uDFO6 这两个码点是不合法的，或者颠倒顺序也不行，因为\uDF06\uD834 并没有对应的字符。</p><p>JSON.stringify()的问题在于，它可能返回 0xD800 到 0xDFFF 之间的单个码点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(<span class="string">&#x27;\u&#123;D834&#125;&#x27;</span>) <span class="comment">// &quot;\u&#123;D834&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>为了确保返回的是合法的 UTF-8 字符，ES2019 改变了 JSON.stringify()的行为。如果遇到 0xD800 到 0xDFFF 之间的单个码点，或者不存在的配对形式，它会返回转义字符串，留给应用自己决定下一步的处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(<span class="string">&#x27;\u&#123;D834&#125;&#x27;</span>) <span class="comment">// &quot;&quot;\\uD834&quot;&quot;</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(<span class="string">&#x27;\uDF06\uD834&#x27;</span>) <span class="comment">// &quot;&quot;\\udf06\\ud834&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h4><p>ES6 新增了几个专门处理 4 字节码点的函数。</p><p><strong>String.fromCodePoint()：从 Unicode 码点返回对应字符</strong></p><p>因为 fromCodePoint() 是 String 的一个静态方法，所以只能通过 String.fromCodePoint() 这样的方式来使用，不能在你创建的 String 对象实例上直接调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.fromCodePoint(<span class="number">42</span>);       <span class="comment">// &quot;*&quot;</span></span><br><span class="line"><span class="built_in">String</span>.fromCodePoint(<span class="number">65</span>, <span class="number">90</span>);   <span class="comment">// &quot;AZ&quot;</span></span><br><span class="line"><span class="built_in">String</span>.fromCodePoint(<span class="number">0x404</span>);    <span class="comment">// &quot;Є&quot;</span></span><br><span class="line"><span class="built_in">String</span>.fromCodePoint(<span class="number">0x2F804</span>);  <span class="comment">// &#x27;你&#x27;</span></span><br><span class="line"><span class="built_in">String</span>.fromCodePoint(<span class="number">194564</span>);   <span class="comment">// &#x27;你&#x27;</span></span><br><span class="line"><span class="built_in">String</span>.fromCodePoint(<span class="number">0x1D306</span>, <span class="number">0x61</span>, <span class="number">0x1D307</span>) <span class="comment">// &quot;𝌆a𝌇&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>.fromCodePoint(<span class="string">&#x27;_&#x27;</span>);      <span class="comment">// RangeError</span></span><br><span class="line"><span class="built_in">String</span>.fromCodePoint(<span class="literal">Infinity</span>); <span class="comment">// RangeError</span></span><br><span class="line"><span class="built_in">String</span>.fromCodePoint(-<span class="number">1</span>);       <span class="comment">// RangeError</span></span><br><span class="line"><span class="built_in">String</span>.fromCodePoint(<span class="number">3.14</span>);     <span class="comment">// RangeError</span></span><br><span class="line"><span class="built_in">String</span>.fromCodePoint(<span class="number">3e-2</span>);     <span class="comment">// RangeError</span></span><br><span class="line"><span class="built_in">String</span>.fromCodePoint(<span class="literal">NaN</span>);      <span class="comment">// RangeError</span></span><br></pre></td></tr></table></figure><p><strong>String.prototype.codePointAt()：从字符返回对应的码点</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Є&#x27;</span>.codePointAt(<span class="number">0</span>))</span><br><span class="line"><span class="comment">//1028(0x404)</span></span><br></pre></td></tr></table></figure><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>ES6 提供了 u 修饰符，对正则表达式添加 4 字节码点的支持。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/^.$/.test(<span class="string">&#x27;𝌆&#x27;</span>)</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line">/^.$/u.test(<span class="string">&#x27;𝌆&#x27;</span>)</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="Unicode-正规化"><a href="#Unicode-正规化" class="headerlink" title="Unicode 正规化"></a>Unicode 正规化</h4><p>有些字符除了字母以外，还有附加符号。比如，汉语拼音的 Ǒ，字母上面的声调就是附加符号。对于许多欧洲语言来说，声调符号是非常重要的。</p><p>Unicode 提供了两种表示方法。一种是带附加符号的单个字符，即一个码点表示一个字符，比如 Ǒ 的码点是 U+01D1；另一种是将附加符号单独作为一个码点，与主体字符复合显示，即两个码点表示一个字符，比如 Ǒ 可以写成 O（U+004F） + ˇ（U+030C）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="string">&#x27;\u01D1&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;Ǒ&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="string">&#x27;\u004F\u030C&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;Ǒ&#x27;</span></span><br></pre></td></tr></table></figure><p>这两种表示方法，视觉和语义都完全一样，理应作为等同情况处理。但是，JavaScript 无法辨别。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;\u01D1&#x27;</span>===<span class="string">&#x27;\u004F\u030C&#x27;</span></span><br><span class="line"><span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>ES6 提供了 normalize 方法，允许”Unicode 正规化”，即将两种方法转为同样的序列。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;\u01D1&#x27;</span>.normalize() === <span class="string">&#x27;\u004F\u030C&#x27;</span>.normalize()</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;!-- 手握锟斤拷，直呼烫烫烫。 --&gt;
&lt;p&gt;计算机中的存储器唯一可以存储的是bit(0/1)，如果想要在计算机上处理信息，就必须把它按位存储</summary>
      
    
    
    
    
    <category term="字符" scheme="http://narutohinata.github.io/tags/%E5%AD%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>初识Tapable</title>
    <link href="http://narutohinata.github.io/2022/01/15/%E5%88%9D%E8%AF%86Tapable/"/>
    <id>http://narutohinata.github.io/2022/01/15/%E5%88%9D%E8%AF%86Tapable/</id>
    <published>2022-01-15T15:54:53.000Z</published>
    <updated>2022-03-29T06:09:06.919Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://chromer-blog.oss-cn-shanghai.aliyuncs.com/blog/image-20220115155511093-2ed441a5f834c63e8676e78594772484735e5258601f52bf4178a514e20ea380.png" alt="image-20220115155511093"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://chromer-blog.oss-cn-shanghai.aliyuncs.com/blog/image-20220115155511093-2ed441a5f834c63e8676e78594772484735e5258601f52bf</summary>
      
    
    
    
    
    <category term="tapable" scheme="http://narutohinata.github.io/tags/tapable/"/>
    
    <category term="webpack" scheme="http://narutohinata.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Hexo自动化部署教程</title>
    <link href="http://narutohinata.github.io/2022/01/14/Hexo%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/"/>
    <id>http://narutohinata.github.io/2022/01/14/Hexo%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/</id>
    <published>2022-01-14T22:23:15.000Z</published>
    <updated>2022-03-29T06:09:06.919Z</updated>
    
    <content type="html"><![CDATA[<p>此篇文章献给平安，读完这篇文章，你将会知道如何部署自己的博客到公网上并且自动化这一过程。</p><ol><li>安装 hexo</li></ol><p><img src="https://chromer-blog.oss-cn-shanghai.aliyuncs.com/blog/image-20220114223522332-7e218618f05355ab9271174ddb7b4f832c0e631247b7380da4ed4212de1b8041.png" alt="image-20220114223522332"></p><p>成功后你打开<a href="http://localhost/4000/">http://localhost/4000/</a>应该就能看到博客已经成功运行到本地了。</p><p>当你想添加一篇新文章时，运行<code>hexo new 文章名称</code> hexo就会在对应<code>source/_posts</code>目录新建一个<code>文章名称.md</code>的markdown文件。另外运行<code>hexo build</code>可以将我们写的文章编译成静态的网页文件到<code>public</code>文件夹里。</p><ol><li><p>Gihub新建Repo</p><p>这次我们借助github提供的pages服务来部署我们的博客到公网。这次需要到github上新建一个repo. Repo的名称请用你的<code>&lt;账号名&gt;.github.io</code>命名。类似我的github账户名是<code>narutiohinata</code>。所以我新建的Repo名称就是 <code>narutohinata.github.io</code>。</p><p><img src="https://chromer-blog.oss-cn-shanghai.aliyuncs.com/blog/image-20220114225124151-5107e783f5c1139f34ef28cb34953d67945baf52516d3788d2dcc0690b0c0bd8.png" alt="image-20220114225124151"></p><p>完成后，将你本地博客项目push到刚刚新建的Repo里。这需要你在你的博客项目初始化git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化git</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment">#这一步是为了和github的默认主分支名称统一</span></span><br><span class="line">git branch -m main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 Github 仓库到本地</span></span><br><span class="line">git remote add origin https://github.com/username/username.github.io.git</span><br><span class="line"><span class="comment"># 将所有文件添加到 git</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 commit</span></span><br><span class="line">git commit -m <span class="string">&quot;initial&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将本地的文件推送到 Github 上的 main 分支</span></span><br><span class="line">git push -u origin main</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>成功之后你应该在你的Repo里看到内容。</p></li><li><p>配置Travis CI</p></li></ol><p>首先你需要到<a href="https://www.travis-ci.com/">https://www.travis-ci.com/</a>去注册你的Travis CI的账号(使用你的github账号注册)。成功后登录进去，然后点击头像进入<code>Settings</code>页面。这里你应该可以看到你的github账号对应的Repos，找到你博客的Repo，点击最右侧的<code>Settings</code>按钮。</p><p><img src="https://chromer-blog.oss-cn-shanghai.aliyuncs.com/blog/image-20220114231602743-2d1b4ce78c8efb71135bf97ad40f6b119c017ff5e5a8c6a61c898c06f10b2295.png" alt="image-20220114231602743"></p><p>在进入的Settings页面，找到Enviroment Variables模块，在这里我们需要去<code>Github</code>申请一个<code>Personal access token</code>。</p><p>回到github,点击右上角头像进入Settings页面。在侧边栏找到<code>Developer settings</code>选项，点击它进入<code>Developer settings</code>页面。然后找到<code>Personal access tokens</code>选项。在这里新建一个token, 确保勾选中repo，expiration过期时间我这里推荐No expiration。不然的话你可能需要定期更新token。</p><p><img src="https://chromer-blog.oss-cn-shanghai.aliyuncs.com/blog/image-20220114232635544-d33579adacb4917bd8488e0551bfc5b003a0710367fd2faba0253dcc2a44e427.png" alt="image-20220114232635544"></p><p>完成后点击最下方的Generate Token按钮，将得到的<code>token</code>保存到上一步Travis CI里的Enviroment Variable里，为了保持和我的一致，你也把环境变量名称设为GH_TOKEN吧。</p><p><img src="https://chromer-blog.oss-cn-shanghai.aliyuncs.com/blog/image-20220114232904230-9eef5d9f73fdae4625d1fb9863f52532cadca7f626a0bd1be740688844ed3709.png" alt="image-20220114232904230"></p><p>到这一步，Travis CI应该算配置ok了，下一步需要回到我们项目目录给它添加.tarvis.yml文件。</p><ol><li>配置.travis.yml</li></ol><p>我们在本地博客项目根目录添加<code>.travis.yml</code>文件。然后贴上下面的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">os:</span> <span class="string">linux</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">yarn</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">13</span> <span class="comment"># use nodejs v13 LTS-</span></span><br><span class="line"><span class="attr">after_success:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;&lt;your nickname&gt;&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;&lt;your email&gt;&quot;</span></span><br><span class="line"><span class="attr">cache:</span> <span class="string">npm</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">main</span> <span class="comment"># build master branch only</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">yarn</span> <span class="string">build</span> <span class="comment"># generate static files</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">strategy:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">provider:</span> <span class="string">pages</span></span><br><span class="line">  <span class="attr">skip_cleanup:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">$GH_TOKEN</span></span><br><span class="line">  <span class="attr">keep_history:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">on:</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">local_dir:</span> <span class="string">public</span></span><br></pre></td></tr></table></figure><p>然后将这个新添加的.travis.yml文件提交到版本库，同时push到github上去(稍微解释下这个配置文件，这个文件会告诉travis ci服务我需要一个linux同时拥有nodejs版本为13的部署环境，我需要安装yarn. 在成功之后配置git config, 克隆main分支的内容，成功后运行<code>yarn build</code>生成静态网页文件,然后会部署到名为<code>gh-pages</code>的分支)。这时如果你看到你的github的博客仓库的git commit值之前出现了一个小图标，看起来像是加载什么东西。那么恭喜你，证明travis ci已经在工作了。过了一段时间如果看到那个图表变成了绿色的小对钩，证明构建部署工作完成。检查下你的分支是不是有了gh-pages分支。</p><p><img src="https://chromer-blog.oss-cn-shanghai.aliyuncs.com/blog/image-20220114234446257-784a2160ca888723488ae7d04b19d97544dfd89c712f395907110b69c0c3bb72.png" alt="image-20220114234446257"></p><ol><li>配置Github Pages服务</li></ol><p>如果上面步骤一切顺利，我们就可以开始配置pages服务了。在你的博客仓库页面，点击上方的Settings选项。在进入的设置页面选择左侧栏的Pages选项卡。具体可参考github这篇文章<a href="https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site">configuring-a-publishing-source-for-your-github-pages-site</a>. 配置成功之后，去打开<code>https://yourname.github.io</code> 如果不出意外，你应该就可以在公网访问你的博客了。</p><p><img src="https://chromer-blog.oss-cn-shanghai.aliyuncs.com/blog/image-20220114234739230-5c020d678d43d29dd8a4c4cd3efeca4d7a5144ed1d83232a43a627a2cdd921b2.png" alt="image-20220114234739230"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;此篇文章献给平安，读完这篇文章，你将会知道如何部署自己的博客到公网上并且自动化这一过程。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装 hexo&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://chromer-blog.oss-cn-shanghai.aliyuncs.c</summary>
      
    
    
    
    
    <category term="CI/CD" scheme="http://narutohinata.github.io/tags/CI-CD/"/>
    
    <category term="Tutorial" scheme="http://narutohinata.github.io/tags/Tutorial/"/>
    
  </entry>
  
  <entry>
    <title>怎么在c语言中调用c++的类非静态成员函数</title>
    <link href="http://narutohinata.github.io/2022/01/06/%E6%80%8E%E4%B9%88%E5%9C%A8c%E8%AF%AD%E8%A8%80%E4%B8%AD%E8%B0%83%E7%94%A8c-%E7%9A%84%E7%B1%BB%E9%9D%9E%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0/"/>
    <id>http://narutohinata.github.io/2022/01/06/%E6%80%8E%E4%B9%88%E5%9C%A8c%E8%AF%AD%E8%A8%80%E4%B8%AD%E8%B0%83%E7%94%A8c-%E7%9A%84%E7%B1%BB%E9%9D%9E%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0/</id>
    <published>2022-01-06T21:58:35.000Z</published>
    <updated>2022-03-29T06:09:06.919Z</updated>
    
    <content type="html"><![CDATA[<p>考虑到下面的代码。</p><p>我们有一个c库代码<code>lib.c</code>,里面有个函数叫<code>subscribe</code>,它接受一个callback函数指针作为参数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib.c</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(*T)</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(<span class="keyword">void</span>* callback)</span> </span>&#123;</span><br><span class="line">  T cb = <span class="keyword">reinterpret_cast</span>&lt;T&gt;(callback);</span><br><span class="line">  cb(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时在我们的c++项目中，我想去调用这个<code>subscribe</code>函数，并准备传入一个非静态成员函数作为参数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> base = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     <span class="function"><span class="keyword">int</span> <span class="title">received</span><span class="params">(<span class="keyword">int</span> offset)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Demo::received</span><span class="params">(<span class="keyword">int</span> offset)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;received data is %d\n&quot;</span>, <span class="keyword">this</span>-&gt;base + offset);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>-&gt;base + offset;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Demo* demo = <span class="keyword">new</span> <span class="built_in">Demo</span>();</span><br><span class="line">    <span class="built_in">subscribe</span>(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span>*&gt;(&amp;Demo::received));<span class="comment">// compiler error; reinterpret_cast from &#x27;int (Demo::*)(int)&#x27; to &#x27;void *&#x27; is not allowed</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不幸的是，我们得到了一个编译错误，看起来像是个类型错误。</p><h2 id="为什么会触发这个错误？"><a href="#为什么会触发这个错误？" class="headerlink" title="为什么会触发这个错误？"></a>为什么会触发这个错误？</h2><p>因为这个c++的非静态类成员函数有一个隐式的参数叫<em>this</em>.它是一个指针指向了这个类的实例对象本身。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Demo* demo = <span class="keyword">new</span> <span class="built_in">Demo</span>();</span><br><span class="line">demo-&gt;<span class="built_in">received</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>上面这行代码等价于下面的这行</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Demo* demo = <span class="keyword">new</span> <span class="built_in">Demo</span>();</span><br><span class="line"><span class="built_in">received</span>(demo, <span class="number">20</span>); <span class="comment">// recevicde(this, 20)</span></span><br></pre></td></tr></table></figure><p>因此我们不能在c代码直接调用这个非静态类成员函数。但是类的静态成员函数没有这个约束。因为类的静态类成员函数并不和任意一个类实例对象绑定。</p><p>于是我们可以写出下面这段代码👇</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> base = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">received</span><span class="params">(<span class="keyword">int</span> offset)</span> </span>&#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;received data is %d\n&quot;</span>, <span class="keyword">this</span>-&gt;base + offset);</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>-&gt;base + offset;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">static_received</span><span class="params">(<span class="keyword">int</span> offset)</span> </span>&#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;static_received data is %d\n&quot;</span>, offset);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Demo* demo = <span class="keyword">new</span> <span class="built_in">Demo</span>();</span><br><span class="line">    <span class="built_in">subscribe</span>(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span>*&gt;(&amp;Demo::static_received));<span class="comment">// 👌</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于上面的原理,我们可以在静态成员函数中去调用这个类的非静态成员函数。也就意味着我们可以在c代码中间接的去调用非静态成员函数。</p><p><img src="https://chromer-blog.oss-cn-shanghai.aliyuncs.com/blog/call_tree-ddeb964ee92a28827b5e886cfb26a97db4b318657ba37a5d71a5e3b81e0ee228.png" alt="call_tree"></p><p>但是要向做的这点，我们首先要解决的是如何在静态成员函数中去调用非静态成员。我们需要确保在类的静态成员中能访问到<code>this</code>指针，这样我们才能调用非静态成员函数。</p><p>但是上面说过静态成员函数不和任意一个类实例对象绑定。也就是说我们无法在类静态成员函数中直接获取到<code>this</code>指针，这是不是意味着这个方案死路一条？别急，我们从c++语言层面确实无法解决，但是我们可以从汇编代码入手。要确保在类静态成员函数中获取到<code>this</code>指针，我们需要在调用函数之前先把<code>this</code>指针保存到寄存器。然后我们再函数内部使用内联汇编的方式再从这个寄存器拿到<code>this</code>指针。整个过程的伪代码如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">static_received</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span>* this_obj = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">  obj = <span class="built_in">get_this_obj_from_register</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;Demo*&gt;(this_obj)-&gt;<span class="built_in">say</span>(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;考虑到下面的代码。&lt;/p&gt;
&lt;p&gt;我们有一个c库代码&lt;code&gt;lib.c&lt;/code&gt;,里面有个函数叫&lt;code&gt;subscribe&lt;/code&gt;,它接受一个callback函数指针作为参数。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;</summary>
      
    
    
    
    
    <category term="c" scheme="http://narutohinata.github.io/tags/c/"/>
    
    <category term="c++" scheme="http://narutohinata.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>科里化</title>
    <link href="http://narutohinata.github.io/2022/01/03/%E7%A7%91%E9%87%8C%E5%8C%96/"/>
    <id>http://narutohinata.github.io/2022/01/03/%E7%A7%91%E9%87%8C%E5%8C%96/</id>
    <published>2022-01-03T00:36:36.000Z</published>
    <updated>2022-03-29T06:09:06.919Z</updated>
    
    <content type="html"><![CDATA[<h2 id="科里化"><a href="#科里化" class="headerlink" title="科里化"></a>科里化</h2><p>科里化是把接受多个<a href="https://zh.wikipedia.org/wiki/參數_(程式設計">参数</a>)的<a href="https://zh.wikipedia.org/wiki/函数">函数</a>变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。例如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> _add = curry(Add);</span><br><span class="line"></span><br><span class="line">_add(<span class="number">10</span>)(<span class="number">20</span>); <span class="comment">//此次等价于Add(10, 20)</span></span><br></pre></td></tr></table></figure><h3 id="实现自己的科里化函数"><a href="#实现自己的科里化函数" class="headerlink" title="实现自己的科里化函数"></a>实现自己的科里化函数</h3><p><img src="https://chromer-blog.oss-cn-shanghai.aliyuncs.com/blog/code-b856e3a4d3390885a667fa79c30bc9750ea4006899fff1bf5930f1321b177f97.png" alt="code"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;科里化&quot;&gt;&lt;a href=&quot;#科里化&quot; class=&quot;headerlink&quot; title=&quot;科里化&quot;&gt;&lt;/a&gt;科里化&lt;/h2&gt;&lt;p&gt;科里化是把接受多个&lt;a href=&quot;https://zh.wikipedia.org/wiki/參數_(程式設計&quot;&gt;参数&lt;/a&gt;)的</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://narutohinata.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>为啥Redis使用跳表而不是使用红黑树</title>
    <link href="http://narutohinata.github.io/2020/04/28/%E4%B8%BA%E5%95%A5Redis%E4%BD%BF%E7%94%A8%E8%B7%B3%E8%A1%A8%E8%80%8C%E4%B8%8D%E6%98%AF%E4%BD%BF%E7%94%A8%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    <id>http://narutohinata.github.io/2020/04/28/%E4%B8%BA%E5%95%A5Redis%E4%BD%BF%E7%94%A8%E8%B7%B3%E8%A1%A8%E8%80%8C%E4%B8%8D%E6%98%AF%E4%BD%BF%E7%94%A8%E7%BA%A2%E9%BB%91%E6%A0%91/</id>
    <published>2020-04-28T15:57:29.000Z</published>
    <updated>2022-03-29T06:09:06.919Z</updated>
    
    <content type="html"><![CDATA[<p>There are a few reasons:</p><ol><li>They are not very memory intensive. It’s up to you basically. Changing parameters about the probability of a node to have a given number of levels will make then less memory intensive than btrees.</li><li>A sorted set is often target of many ZRANGE or ZREVRANGE operations, that is, traversing the skip list as a linked list. With this operation the cache locality of skip lists is at least as good as with other kind of balanced trees.</li><li>They are simpler to implement, debug, and so forth. For instance thanks to the skip list simplicity I received a patch (already in Redis master) with augmented skip lists implementing ZRANK in O(log(N)). It required little changes to the code.</li></ol><p>About the Append Only durability &amp; speed, I don’t think it is a good idea to optimize Redis at cost of more code and more complexity for a use case that IMHO should be rare for the Redis target (fsync() at every command). Almost no one is using this feature even with ACID SQL databases, as the performance hint is big anyway.</p><p>About threads: our experience shows that Redis is mostly I/O bound. I’m using threads to serve things from Virtual Memory. The long term solution to exploit all the cores, assuming your link is so fast that you can saturate a single core, is running multiple instances of Redis (no locks, almost fully scalable linearly with number of cores), and using the “Redis Cluster” solution that I plan to develop in the future.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;There are a few reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;They are not very memory intensive. It’s up to you basically. Changing parameters about the probabi</summary>
      
    
    
    
    
    <category term="Redis" scheme="http://narutohinata.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Golang文件操作</title>
    <link href="http://narutohinata.github.io/2020/02/28/Golang%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>http://narutohinata.github.io/2020/02/28/Golang%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</id>
    <published>2020-02-28T15:57:29.000Z</published>
    <updated>2022-03-29T06:09:06.919Z</updated>
    
    <content type="html"><![CDATA[<h2 id="判断文件是否纯在"><a href="#判断文件是否纯在" class="headerlink" title="判断文件是否纯在"></a>判断文件是否纯在</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  stat, err := os.Stat(<span class="string">&quot;~/Demo.txt&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;err is&quot;</span>, err)</span><br><span class="line">    <span class="keyword">if</span> os.IsNotExist(err) &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;文件不纯在&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;文件纯在!&quot;</span>)</span><br><span class="line">    fmt.Println(stat)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件间拷贝"><a href="#文件间拷贝" class="headerlink" title="文件间拷贝"></a>文件间拷贝</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;io&quot;</span></span><br><span class="line">  <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  srcFile, _ := os.OpenFile(<span class="string">&quot;~/in.txt&quot;</span>)</span><br><span class="line">  dstFile, _ := os.OpenFile(<span class="string">&quot;~/out.txt&quot;</span>)</span><br><span class="line">  written, err := io.Copy(dstFile, srcFile)</span><br><span class="line">  <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;拷贝成功, 字节数=&quot;</span>, written)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;拷贝失败，err=&quot;</span>,err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓冲式文件拷贝"><a href="#缓冲式文件拷贝" class="headerlink" title="缓冲式文件拷贝"></a>缓冲式文件拷贝</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//打开源文件</span></span><br><span class="line">srcfile, _ := os.OpenFile(<span class="string">&quot;~/in.txt&quot;</span>, os.O_RDONLY, <span class="number">0666</span>)</span><br><span class="line"><span class="comment">//打开目标文件</span></span><br><span class="line">dstfile, _ := os.OpenFile(<span class="string">&quot;~/out.txt&quot;</span>, os.O_CREATE|os.O_WRONLY, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">srcfile.Close()</span><br><span class="line">dstfile.Close()</span><br><span class="line">fmt.Println(<span class="string">&quot;文件已关闭&quot;</span>)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">reader := bufio.NewReader(srcfile)</span><br><span class="line">writer := bufio.NewWriter(dstfile)</span><br><span class="line">buffer := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1024</span>)</span><br><span class="line"><span class="keyword">for</span>&#123;</span><br><span class="line">_ , err := reader.Read(buffer)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line"><span class="keyword">if</span> err == io.EOF&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;源文件读取完毕&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;error&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">_, err1 := writer.Write(buffer)</span><br><span class="line"><span class="keyword">if</span> err1 != <span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Println(err1)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;判断文件是否纯在&quot;&gt;&lt;a href=&quot;#判断文件是否纯在&quot; class=&quot;headerlink&quot; title=&quot;判断文件是否纯在&quot;&gt;&lt;/a&gt;判断文件是否纯在&lt;/h2&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class</summary>
      
    
    
    
    
    <category term="Golang" scheme="http://narutohinata.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>CommonJS是如何处理循环依赖的</title>
    <link href="http://narutohinata.github.io/2020/01/01/Commonjs%E6%98%AF%E5%A6%82%E6%9E%9C%E5%A4%84%E7%90%86%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E7%9A%84/"/>
    <id>http://narutohinata.github.io/2020/01/01/Commonjs%E6%98%AF%E5%A6%82%E6%9E%9C%E5%A4%84%E7%90%86%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E7%9A%84/</id>
    <published>2020-01-01T13:21:32.000Z</published>
    <updated>2022-03-29T06:09:06.919Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Commonjs是如何解决循环依赖"><a href="#Commonjs是如何解决循环依赖" class="headerlink" title="Commonjs是如何解决循环依赖"></a>Commonjs是如何解决循环依赖</h2><p>要回答这个问题我们先了解下<code>cjs</code> 的模块加载流程。当加载一个<code>cjs</code> 模块的时候会先缓存模块对象 <code>Module._cache[filename] = module</code>  然后再加载模块 <code>module.load(filename)</code> 。基于这个模块加载流程我们分析下面这个循环依赖的代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A.js</span></span><br><span class="line"><span class="built_in">exports</span>.name = <span class="string">&quot;A&quot;</span></span><br><span class="line"><span class="keyword">const</span> B = <span class="built_in">require</span>(<span class="string">&quot;B&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(B)</span><br><span class="line"><span class="built_in">exports</span>.data = <span class="string">&quot;Data-A&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// B.js</span></span><br><span class="line"><span class="built_in">exports</span>.name = <span class="string">&quot;B&quot;</span></span><br><span class="line"><span class="keyword">const</span> A = <span class="built_in">require</span>(<span class="string">&quot;A&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(A)</span><br><span class="line"><span class="built_in">exports</span>.data = <span class="string">&quot;Data-B&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当我们执行<code>node A.js</code> 会输出什么？</p><p>首先系统会先缓存A模块然后在加载A模块(也就是执行A里面的代码)， 然后当A代码执行到第二行 系统会去require B模块，同A模块一样,系统也是先缓存B模块 然后加载B模块，当B执行到第二行<code>const A = require(&quot;A&quot;)</code>的时候 系统会去加载A模块，但此次我们发现没有？A模块已经在缓存中了，只不过这个A模块还没加载完成 处于一种部分加载的状态。也就是B这里得到的A是个部分值(也就是A.js里在require(‘B’)上方exports出来的值 <code>&#123; name: &quot;A&quot; &#125;</code> )。然后B打印A的部分值<code>&#123; name: &quot;A&quot; &#125;</code> 然后执行最后一行代码后，module B模块加载完毕。此时执行权回到模块A，A这里得到的B是个完全加载的模块<code>&#123; name: &quot;B&quot;, data: &quot;Data-B&quot; &#125;</code> </p><p>于是我们可以这样回答这个问题，cjs的模块加载流程是先缓存再加载。基于这个原理我们很容易发现，当出现循环依赖，我们拿到的是一个部分加载模块的部分值。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Commonjs是如何解决循环依赖&quot;&gt;&lt;a href=&quot;#Commonjs是如何解决循环依赖&quot; class=&quot;headerlink&quot; title=&quot;Commonjs是如何解决循环依赖&quot;&gt;&lt;/a&gt;Commonjs是如何解决循环依赖&lt;/h2&gt;&lt;p&gt;要回答这个问题我们先</summary>
      
    
    
    
    
    <category term="commonjs" scheme="http://narutohinata.github.io/tags/commonjs/"/>
    
  </entry>
  
  <entry>
    <title>Dom元素的一些宽高计算值</title>
    <link href="http://narutohinata.github.io/2019/03/03/Dom%E5%85%83%E7%B4%A0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%BD%E9%AB%98%E8%AE%A1%E7%AE%97%E5%80%BC/"/>
    <id>http://narutohinata.github.io/2019/03/03/Dom%E5%85%83%E7%B4%A0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%BD%E9%AB%98%E8%AE%A1%E7%AE%97%E5%80%BC/</id>
    <published>2019-03-03T14:45:41.000Z</published>
    <updated>2022-03-29T06:09:06.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dom元素的一些宽高计算值"><a href="#Dom元素的一些宽高计算值" class="headerlink" title="Dom元素的一些宽高计算值"></a>Dom元素的一些宽高计算值</h1><h2 id="HTMLElement-offsetWidth-Height"><a href="#HTMLElement-offsetWidth-Height" class="headerlink" title="HTMLElement.offsetWidth/Height"></a>HTMLElement.offsetWidth/Height</h2><p><code>HTMLElement.offsetWidth/Hight</code> 是一个只读属性,  返回一个元素的布局宽度/高度。一般来说(各个浏览器的实现可能不一致) offsetWidth/Height是测量包含元素的边框(border)、内边距(padding)、滚动条(scrollbar)、以及CSS设置的size值。</p><ul><li>offsetWidth = content.width + paddingLeft + paddingRight + borderLeft + borderRight + verticalScrollbarWidth</li><li>offsetHeight = content.width + paddingTop + paddingBottom + borderTop + borderBottom + horizontalScrollbarWidth</li></ul><h2 id="Element-clientWidth-Height"><a href="#Element-clientWidth-Height" class="headerlink" title="Element.clientWidth/Height"></a>Element.clientWidth/Height</h2><p><code>Element.clientWidth/Element.clientHeight</code> 属性表示一个元素的内部宽度/高度。该属性包含内边距padding,但是不包含边框border、外边距margin以及滚动条。 也就是说:</p><ul><li>Element.clientWidth = contentWidth + paddingLeft + paddingRight</li><li>Element.clientHeight = contentHeight + paddingTop + paddingBottom</li></ul><p>值得注意的是内联元素(inline element)以及没有css样式的原始的clientWidth/clientHeight的属性值为0</p><h2 id="Element-scrollWidth-Height"><a href="#Element-scrollWidth-Height" class="headerlink" title="Element.scrollWidth/Height"></a>Element.scrollWidth/Height</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Dom元素的一些宽高计算值&quot;&gt;&lt;a href=&quot;#Dom元素的一些宽高计算值&quot; class=&quot;headerlink&quot; title=&quot;Dom元素的一些宽高计算值&quot;&gt;&lt;/a&gt;Dom元素的一些宽高计算值&lt;/h1&gt;&lt;h2 id=&quot;HTMLElement-offsetWid</summary>
      
    
    
    
    
    <category term="css" scheme="http://narutohinata.github.io/tags/css/"/>
    
    <category term="dom" scheme="http://narutohinata.github.io/tags/dom/"/>
    
  </entry>
  
  <entry>
    <title>R大博客里对闭包的解释【转】</title>
    <link href="http://narutohinata.github.io/2018/06/08/R%E5%A4%A7%E5%8D%9A%E5%AE%A2%E9%87%8C%E5%AF%B9%E9%97%AD%E5%8C%85%E7%9A%84%E8%A7%A3%E9%87%8A%E3%80%90%E8%BD%AC%E3%80%91/"/>
    <id>http://narutohinata.github.io/2018/06/08/R%E5%A4%A7%E5%8D%9A%E5%AE%A2%E9%87%8C%E5%AF%B9%E9%97%AD%E5%8C%85%E7%9A%84%E8%A7%A3%E9%87%8A%E3%80%90%E8%BD%AC%E3%80%91/</id>
    <published>2018-06-08T11:27:49.000Z</published>
    <updated>2022-03-29T06:09:06.919Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="http://rednaxelafx.iteye.com/blog/245022">转自 RednaxelaFX 博客评论</a></p></blockquote><p>我不理解你不理解的是什么……<code>闭包</code>的定义很好理解撒。要点有俩： </p><ol><li>一个含有<code>自由变量</code>的<code>函数</code>； </li><li>这些自由变量所在的<code>环境</code>。</li></ol><p>外部环境持有内部函数所使用的自由变量，对内部函数形成“闭包”，就这样…… 简单但不严格的说，一个函数的“<code>自由变量</code>”就是既不是参数也不是局部变量的变量。 </p><span id="more"></span><p>一个纯粹（无副作用)的函数如果不含有自由变量，那么每次用相同的参数调用后的得到的结果肯定是一样的。但如果一个函数含有自由变量，那么调用返回的结果不但依赖于参数的值，还依赖于自由变量的值。因此一个含有自由变量的函数要正确执行，必须保证其所依赖的外围环境的存在。 </p><p>基于类的面向对象程序语言中有一种情况，就是方法是用的自由变量是来自其所在的类的实例的。像这样：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">AddWith</span><span class="params">( <span class="keyword">int</span> y )</span> </span>&#123; <span class="keyword">return</span> x + y; &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样的<code>AddWith()</code>有一个<code>参数y</code>和一个<code>自由变量x</code>，其返回的值既依赖于参数的值也依赖于自由变量的值。为了让<code>AddWith()</code>正确工作，它必须依附于<code>Foo</code>的一个实例，不然就得不到x的值了（称为：“变量i未与值相绑定”）。很好理解对吧。不过面向对象的语言里一般不把类称为闭包，没为什么，就是种习惯。<br>当然严格来说方法所捕获的自由变量不是i，而是<code>this</code>；x是通过this来访问到的，完整写出应该是<code>this.x</code>。 </p><p>如果这个“<code>外围环境</code>”来自一个<code>外围函数</code>，并且内部函数可以作为返回值返回，那么外围函数的局部环境就不能在调用结束时就撤销。也就是说不能在栈上分配空间。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AddWith</span>(<span class="params">x</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">y</span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> x + y  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></p><p>这样的内部函数有一个<code>参数y</code>和一个<code>自由变量x</code>。x在外围函数<code>AddWith()</code>里是一个参数，也就是一个“<code>已绑定了值的变量</code>”（bound variable）。<code>AddWith()</code>的局部作用域中含有内部函数所使用的自由变量，对内部函数形成闭包。为了让返回出去的内部函数能正常工作，这个内部函数必须依附于一个能提供x的值的环境，也就是<code>AddWith()</code>提供的闭包。这样我们就能够：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addFive = AddWith(<span class="number">5</span>)  </span><br><span class="line"><span class="keyword">var</span> seven = addFive(<span class="number">2</span>) <span class="comment">// 2+5=7  </span></span><br></pre></td></tr></table></figure></p><p>全局变量是一种特殊的自由变量。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://rednaxelafx.iteye.com/blog/245022&quot;&gt;转自 RednaxelaFX 博客评论&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我不理解你不理解的是什么……&lt;code&gt;闭包&lt;/code&gt;的定义很好理解撒。要点有俩： &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个含有&lt;code&gt;自由变量&lt;/code&gt;的&lt;code&gt;函数&lt;/code&gt;； &lt;/li&gt;
&lt;li&gt;这些自由变量所在的&lt;code&gt;环境&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;外部环境持有内部函数所使用的自由变量，对内部函数形成“闭包”，就这样…… 简单但不严格的说，一个函数的“&lt;code&gt;自由变量&lt;/code&gt;”就是既不是参数也不是局部变量的变量。 &lt;/p&gt;</summary>
    
    
    
    
    <category term="转载 闭包" scheme="http://narutohinata.github.io/tags/%E8%BD%AC%E8%BD%BD-%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>javascript各排序算法实现</title>
    <link href="http://narutohinata.github.io/2018/06/06/javascript%E5%90%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/"/>
    <id>http://narutohinata.github.io/2018/06/06/javascript%E5%90%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</id>
    <published>2018-06-06T11:14:34.000Z</published>
    <updated>2022-03-29T06:09:06.919Z</updated>
    
    <content type="html"><![CDATA[<ol><li>冒泡排序(普通版)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble_sort</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = data.length - <span class="number">1</span>; i &gt; <span class="number">0</span> ; i-- )&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (data[j] &gt; data[j+<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = data[j+<span class="number">1</span>];</span><br><span class="line">        data[j+<span class="number">1</span>] = data[j];</span><br><span class="line">        data[j] = tmp;</span><br><span class="line">      &#125;      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>冒泡排序（改良版1)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble_sort1</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = data.length - <span class="number">1</span>; i &gt; <span class="number">0</span> ; i-- )&#123;</span><br><span class="line">    <span class="keyword">let</span> tag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (data[j] &gt; data[j+<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = data[j+<span class="number">1</span>];</span><br><span class="line">        data[j+<span class="number">1</span>] = data[j];</span><br><span class="line">        data[j] = tmp;</span><br><span class="line">        tag = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tag) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>这里说下改良版的思路，上一个版本没有记录上一趟冒泡的排序状态，导致必须执行<code>n-1</code>趟排序。考虑最好的情况，如果一开始序列就是有序的，如果使用第一种排序的话，导致可以<code>O(n)</code>的解决的问题花了<code>O(n^2)</code>的时间了，这显然是不合适的，于是我们在每一趟排序开始前，设置一个表示序列是否有序的状态量(<code>let tag</code>)，并认为一开始是有序的(<code>true</code>)，然后在交换排序过程中一旦发生了交换就把状态量设置为无序状态（<code>false</code>)。然后在进行下一趟排序的时候检查这个状态量，如果是<code>true</code>则说明序列此时已经有序无需进行下一趟了直接返回就行了，如果为<code>false</code>则表示序列此时还是无序状态则需要进行下一趟排序。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;冒泡排序(普通版)&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;</summary>
      
    
    
    
    <category term="javascript" scheme="http://narutohinata.github.io/categories/javascript/"/>
    
    
    <category term="算法" scheme="http://narutohinata.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>R语言语法【一】</title>
    <link href="http://narutohinata.github.io/2018/05/08/R%E8%AF%AD%E8%A8%80%E8%AF%AD%E6%B3%95%E3%80%90%E4%B8%80%E3%80%91/"/>
    <id>http://narutohinata.github.io/2018/05/08/R%E8%AF%AD%E8%A8%80%E8%AF%AD%E6%B3%95%E3%80%90%E4%B8%80%E3%80%91/</id>
    <published>2018-05-08T20:14:18.000Z</published>
    <updated>2022-03-29T06:09:06.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="赋值语法"><a href="#赋值语法" class="headerlink" title="赋值语法"></a>赋值语法</h1><p>在R语言中赋值使用<code>&lt;-</code>,比如下面把10赋值给变量a:<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a&lt;-<span class="number">10</span></span><br></pre></td></tr></table></figure><br><span id="more"></span></p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;赋值语法&quot;&gt;&lt;a href=&quot;#赋值语法&quot; class=&quot;headerlink&quot; title=&quot;赋值语法&quot;&gt;&lt;/a&gt;赋值语法&lt;/h1&gt;&lt;p&gt;在R语言中赋值使用&lt;code&gt;&amp;lt;-&lt;/code&gt;,比如下面把10赋值给变量a:&lt;br&gt;&lt;figure class=&quot;highlight r&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a&amp;lt;-&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;</summary>
    
    
    
    
    <category term="R语言" scheme="http://narutohinata.github.io/tags/R%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs代码片段</title>
    <link href="http://narutohinata.github.io/2018/05/08/Nodejs%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    <id>http://narutohinata.github.io/2018/05/08/Nodejs%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</id>
    <published>2018-05-08T17:38:24.000Z</published>
    <updated>2022-03-29T06:09:06.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nodejs-Base64编码和解码"><a href="#Nodejs-Base64编码和解码" class="headerlink" title="Nodejs Base64编码和解码"></a>Nodejs <code>Base64</code>编码和解码</h1><ol><li><p>Base64编码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;我爱js&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> decode_str = Buffer.from(str).toString(<span class="string">&#x27;base64&#x27;</span>) <span class="comment">// &gt; &#x27;5oiR54ixanM=&#x27;</span></span><br><span class="line"><span class="comment">// 或者这样：new Buffer(str).toString(&#x27;base64&#x27;) 【已弃用】</span></span><br></pre></td></tr></table></figure></li><li><p>Base64解码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> decode_str = <span class="string">&#x27;5oiR54ixanM=&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> str = Buffer.from(decode_str, <span class="string">&#x27;base64&#x27;</span>).toString() <span class="comment">// &gt; 我爱js</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Nodejs-Base64编码和解码&quot;&gt;&lt;a href=&quot;#Nodejs-Base64编码和解码&quot; class=&quot;headerlink&quot; title=&quot;Nodejs Base64编码和解码&quot;&gt;&lt;/a&gt;Nodejs &lt;code&gt;Base64&lt;/code&gt;编码和解码&lt;</summary>
      
    
    
    
    
    <category term="Nodejs 代码片段 Tips" scheme="http://narutohinata.github.io/tags/Nodejs-%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5-Tips/"/>
    
  </entry>
  
  <entry>
    <title>mongodb下n:m关系</title>
    <link href="http://narutohinata.github.io/2018/04/29/mongodb%E4%B8%8Bn-m%E5%85%B3%E7%B3%BB/"/>
    <id>http://narutohinata.github.io/2018/04/29/mongodb%E4%B8%8Bn-m%E5%85%B3%E7%B3%BB/</id>
    <published>2018-04-29T10:46:39.000Z</published>
    <updated>2022-03-29T06:09:06.919Z</updated>
    
    <content type="html"><![CDATA[<p>在用户关注系统中关注人和被关注人是<code>多对多关系</code>,在关系型数据库中我们很容易通过中间表关联实现这个功能。关注和取消关注无非就是对这个中间表的记录的增加和删除。那么在<code>mongodb</code>中如何实现这种多对多关系呢？我们知道<code>关注操作</code>就是<code>被关注操作</code>的逆操作，当用户<code>A</code>关注用户<code>B</code>的时候,也就是用户<code>B</code>被用户<code>A</code>关注了。那么我们可以在用户文档中维护一个用户关注的用户集合<code>followings</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">  <span class="attr">followings</span>: [ObjectId]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">  <span class="attr">followings</span>: [ObjectId]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><span id="more"></span><ol><li>那么用户<code>A</code>关注的<code>B</code>的操作我们就可以这么写了:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = db.users.findOne(&#123; <span class="attr">username</span>: <span class="string">&#x27;B&#x27;</span> &#125;);</span><br><span class="line">db.users.updateOne(</span><br><span class="line">  &#123; <span class="attr">username</span>: <span class="string">&#x27;A&#x27;</span> &#125;,</span><br><span class="line">  &#123; </span><br><span class="line">    <span class="attr">$push</span>: &#123; <span class="attr">followings</span>: b._id &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></li><li>那么用户<code>A</code>取消关注的<code>B</code>的操作我们就可以这么写了:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = db.users.findOne(&#123; <span class="attr">username</span>: <span class="string">&#x27;B&#x27;</span> &#125;);</span><br><span class="line">db.users.updateOne(</span><br><span class="line">  &#123; <span class="attr">username</span>: <span class="string">&#x27;A&#x27;</span> &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">$pull</span>: &#123; <span class="attr">followings</span>: b._id &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;在用户关注系统中关注人和被关注人是&lt;code&gt;多对多关系&lt;/code&gt;,在关系型数据库中我们很容易通过中间表关联实现这个功能。关注和取消关注无非就是对这个中间表的记录的增加和删除。那么在&lt;code&gt;mongodb&lt;/code&gt;中如何实现这种多对多关系呢？我们知道&lt;code&gt;关注操作&lt;/code&gt;就是&lt;code&gt;被关注操作&lt;/code&gt;的逆操作，当用户&lt;code&gt;A&lt;/code&gt;关注用户&lt;code&gt;B&lt;/code&gt;的时候,也就是用户&lt;code&gt;B&lt;/code&gt;被用户&lt;code&gt;A&lt;/code&gt;关注了。那么我们可以在用户文档中维护一个用户关注的用户集合&lt;code&gt;followings&lt;/code&gt;:&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;username&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;A&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;followings&lt;/span&gt;: [ObjectId]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;username&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;B&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;followings&lt;/span&gt;: [ObjectId]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="mongodb" scheme="http://narutohinata.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>我的代码小片段</title>
    <link href="http://narutohinata.github.io/2018/04/28/%E6%88%91%E7%9A%84%E4%BB%A3%E7%A0%81%E5%B0%8F%E7%89%87%E6%AE%B5/"/>
    <id>http://narutohinata.github.io/2018/04/28/%E6%88%91%E7%9A%84%E4%BB%A3%E7%A0%81%E5%B0%8F%E7%89%87%E6%AE%B5/</id>
    <published>2018-04-28T15:57:29.000Z</published>
    <updated>2022-03-29T06:09:06.919Z</updated>
    
    <content type="html"><![CDATA[<ol><li>获取cookie<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cookies = <span class="built_in">document</span>.cookie;</span><br><span class="line">  <span class="keyword">let</span> _cookies = cookies.split(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> _cookies.reduce(<span class="function">(<span class="params">a, cookie</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> _cookie = cookie.split(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.assign(a, &#123; [_cookie[<span class="number">0</span>]]: _cookie[<span class="number">1</span>]&#125;);</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><span id="more"></span></li><li><p>深拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> deep_clone = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> clonedObj;</span><br><span class="line">  <span class="comment">// Handle null or undefine or primitive type</span></span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span> || <span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Handle Array</span></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">    clonedObj = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; obj.length; index++) &#123;</span><br><span class="line">      clonedObj[index] = deep_clone(obj[index]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> clonedObj;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Handle Date</span></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">    clonedObj = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    clonedObj.setDate(obj.getDate());</span><br><span class="line">    <span class="keyword">return</span> clonedObj;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Handle Object</span></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">    clonedObj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">        clonedObj[key] = deep_clone(obj[key]);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> clonedObj;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;cannot clone this&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>翻转数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 翻转数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr = arr || [];</span><br><span class="line">  <span class="keyword">if</span> (arr.length === <span class="number">0</span>) <span class="keyword">return</span> [];</span><br><span class="line">  <span class="keyword">var</span> temp_arr = copy_array(arr);</span><br><span class="line">  <span class="keyword">var</span> length = temp_arr.length;</span><br><span class="line">  <span class="keyword">var</span> index = length,</span><br><span class="line">      new_index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(--index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> value = temp_arr[index];</span><br><span class="line">    <span class="built_in">console</span>.log();</span><br><span class="line">    arr[new_index++] = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拷贝数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy_array</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;argument is not array&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> index = -<span class="number">1</span>,</span><br><span class="line">      length = arr.length,</span><br><span class="line">      resIndex = <span class="number">0</span>,</span><br><span class="line">      result = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(++index &lt; length) &#123;</span><br><span class="line">    <span class="keyword">var</span> value = arr[index];</span><br><span class="line">    result[resIndex++] = value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;ol&gt;
&lt;li&gt;获取cookie&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getCookie&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; cookies = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.cookie;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; _cookies = cookies.split(&lt;span class=&quot;string&quot;&gt;&amp;quot;;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _cookies.reduce(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;a, cookie&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; _cookie = cookie.split(&lt;span class=&quot;string&quot;&gt;&amp;quot;=&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(a, &amp;#123; [_cookie[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]]: _cookie[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;, &amp;#123;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>MongoDB中的1:m关系</title>
    <link href="http://narutohinata.github.io/2018/04/28/MongoDB%E4%B8%AD%E7%9A%841:m%E5%85%B3%E7%B3%BB/"/>
    <id>http://narutohinata.github.io/2018/04/28/MongoDB%E4%B8%AD%E7%9A%841:m%E5%85%B3%E7%B3%BB/</id>
    <published>2018-04-28T13:15:05.000Z</published>
    <updated>2022-03-29T06:09:06.919Z</updated>
    
    <content type="html"><![CDATA[<p>在博客系统中用户(user)和博文(post)是1对多关系,在mongodb中我们怎么表述这种关系呢？在mongo中我们可以利用在多端保存1端的<code>ObjectId</code>来维持这种<code>1:m</code>关系,下面分别列出<code>user</code>和<code>post</code>的结构:</p><ol><li><code>user</code>的结构<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5ae3caa35ece85125d2429f7&quot;</span>),</span><br><span class="line">    <span class="attr">&quot;username&quot;</span> : <span class="string">&quot;百思可乐1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;password&quot;</span> : <span class="string">&quot;123456&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span> : <span class="number">21</span>,</span><br><span class="line">    <span class="attr">&quot;updateAt&quot;</span> : ISODate(<span class="string">&quot;2018-04-28T01:11:54.698Z&quot;</span>),</span><br><span class="line">    <span class="attr">&quot;createdAt&quot;</span> : ISODate(<span class="string">&quot;2018-04-28T01:11:54.698Z&quot;</span>),</span><br><span class="line">    <span class="attr">&quot;__v&quot;</span> : <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><span id="more"></span><ol><li><code>post</code>的结构<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5ae3384594aa810f8d17f073&quot;</span>),</span><br><span class="line">    <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;ruby&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;body&quot;</span> : <span class="string">&quot;sdasda&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;author&quot;</span> : ObjectId(<span class="string">&quot;5ae3caa35ece85125d2429f7&quot;</span>),</span><br><span class="line">    <span class="attr">&quot;__v&quot;</span> : <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>上面我们可以看到我们在<code>post</code>document里添加个一个<code>author</code>的字段里面保存了<code>user</code>的<code>ObjectId</code>.</p><p>于是我们就可以执行下面这些操作了:</p><ol><li><p>查询一个用户发布的所有文章</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = db.user.findOne();</span><br><span class="line"><span class="keyword">var</span> posts = db.post.find(&#123;<span class="attr">author</span>: user._id&#125;);</span><br></pre></td></tr></table></figure></li><li><p>查询一篇文章的作者</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> post = db.post.findOne();</span><br><span class="line"><span class="keyword">var</span> user = db.user.findOne(&#123;<span class="attr">author</span>: post.author &#125;);</span><br></pre></td></tr></table></figure></li><li><p>用户创建文章</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = db.user.findOne();</span><br><span class="line"><span class="keyword">var</span> posts = db.post.insert(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;ruby&quot;</span>,</span><br><span class="line">    <span class="attr">body</span>: <span class="string">&quot;sdasda&quot;</span>,</span><br><span class="line">    <span class="attr">author</span>: user._id</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;在博客系统中用户(user)和博文(post)是1对多关系,在mongodb中我们怎么表述这种关系呢？在mongo中我们可以利用在多端保存1端的&lt;code&gt;ObjectId&lt;/code&gt;来维持这种&lt;code&gt;1:m&lt;/code&gt;关系,下面分别列出&lt;code&gt;user&lt;/code&gt;和&lt;code&gt;post&lt;/code&gt;的结构:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;user&lt;/code&gt;的结构&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; : ObjectId(&lt;span class=&quot;string&quot;&gt;&amp;quot;5ae3caa35ece85125d2429f7&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;username&amp;quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&amp;quot;百思可乐1&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;password&amp;quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&amp;quot;123456&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;updateAt&amp;quot;&lt;/span&gt; : ISODate(&lt;span class=&quot;string&quot;&gt;&amp;quot;2018-04-28T01:11:54.698Z&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;createdAt&amp;quot;&lt;/span&gt; : ISODate(&lt;span class=&quot;string&quot;&gt;&amp;quot;2018-04-28T01:11:54.698Z&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;__v&amp;quot;&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="mongodb" scheme="http://narutohinata.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>Node模块列表</title>
    <link href="http://narutohinata.github.io/2018/04/10/Node%E6%A8%A1%E5%9D%97%E5%88%97%E8%A1%A8/"/>
    <id>http://narutohinata.github.io/2018/04/10/Node%E6%A8%A1%E5%9D%97%E5%88%97%E8%A1%A8/</id>
    <published>2018-04-10T14:42:13.000Z</published>
    <updated>2022-03-29T06:09:06.919Z</updated>
    
    <content type="html"><![CDATA[<ol><li>读写Excel文件 <a href="https://github.com/guyonroche/exceljs">ExcelJs</a></li><li>时间格式化工具 <a href="https://date-fns.org/">date-fns</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;读写Excel文件 &lt;a href=&quot;https://github.com/guyonroche/exceljs&quot;&gt;ExcelJs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;时间格式化工具 &lt;a href=&quot;https://date-fns.org/&quot;&gt;date-fns&lt;/a&gt;</summary>
      
    
    
    
    
    <category term="node" scheme="http://narutohinata.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>javascript中的继承</title>
    <link href="http://narutohinata.github.io/2018/04/06/javascript%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF/"/>
    <id>http://narutohinata.github.io/2018/04/06/javascript%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF/</id>
    <published>2018-04-06T20:55:18.000Z</published>
    <updated>2022-03-29T06:09:06.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-原型链"><a href="#1-原型链" class="headerlink" title="1.原型链"></a>1.原型链</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.property = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.property;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.subproperty = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承了SuperType</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line"></span><br><span class="line">SubType.prototype.getSubValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.subproperty;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SubType();</span><br><span class="line">alert(instance.getSuperValue());”</span><br><span class="line"></span><br><span class="line">摘录来自: Nicholas C.Zakas. “JavaScript高级程序设计（第<span class="number">3</span>版）。” iBooks. </span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这个方式实现继承最大的问题就是在包含引用类型的原型会被所有实例共享，而导致子类型的实例对这个引用类型的修改可以被其他所有子类型看见。例如：</p></blockquote><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;            </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承了SuperType</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType();</span><br><span class="line">instance1.colors.push(<span class="string">&quot;black&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance1.colors);        <span class="comment">//&quot;red,blue,green,black&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType();</span><br><span class="line"><span class="built_in">console</span>.log(instance2.colors);        <span class="comment">//&quot;red,blue,green,black”</span></span><br><span class="line"></span><br><span class="line">摘录来自: Nicholas C.Zakas. “JavaScript高级程序设计（第<span class="number">3</span>版）。” iBooks. </span><br></pre></td></tr></table></figure><p>子类型实例<code>instance2</code>修改应用类型属性<code>color</code>,导致其他子类型的实例的<code>color</code>属性也被修改了。(因为<code>color</code>是原型上的一个属性是被所有实例共享的)</p><h1 id="2-借用构造函数"><a href="#2-借用构造函数" class="headerlink" title="2.借用构造函数"></a>2.借用构造函数</h1><p>为了解决引用类型属性在原型上所导致的问题。我们可以在子类型的构造函数中使用父类型的构造函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">  <span class="comment">// 借用父类型的构造函数</span></span><br><span class="line">  SuperType.call(<span class="built_in">this</span>);          </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType();</span><br><span class="line">instance1.colors.push(<span class="string">&quot;black&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance1.colors);        <span class="comment">//&quot;red,blue,green,black&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType();</span><br><span class="line"><span class="built_in">console</span>.log(instance2.colors);        <span class="comment">//&quot;red,blue,green&quot;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>借用构造函数虽然解决了原型链继承所带来的问题，但是由于方法都在构造函数中定义导致无法复用函数。而且父类型的方法对子类型也是不可见的。</p></blockquote><h1 id="3-组合继承"><a href="#3-组合继承" class="headerlink" title="3.组合继承"></a>3.组合继承</h1><p>既然原型链继承和借用构造函数继承都有缺陷，那我们把它们结合起来互补，不就解决了问题了吗？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>)</span>&#123;  </span><br><span class="line">    <span class="comment">//继承属性</span></span><br><span class="line">    SuperType.call(<span class="built_in">this</span>, name);</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 指定原型</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line"></span><br><span class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="built_in">this</span>.age);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType(<span class="string">&quot;Nicholas&quot;</span>, <span class="number">29</span>);</span><br><span class="line">instance1.colors.push(<span class="string">&quot;black&quot;</span>);</span><br><span class="line">alert(instance1.colors);      <span class="comment">//&quot;red,blue,green,black&quot;</span></span><br><span class="line">instance1.sayName();          <span class="comment">//&quot;Nicholas&quot;;</span></span><br><span class="line">instance1.sayAge();           <span class="comment">//29</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType(<span class="string">&quot;Greg&quot;</span>, <span class="number">27</span>);</span><br><span class="line">alert(instance2.colors);      <span class="comment">//&quot;red,blue,green&quot;</span></span><br><span class="line">instance2.sayName();          <span class="comment">//&quot;Greg&quot;;</span></span><br><span class="line">instance2.sayAge();           <span class="comment">//27”</span></span><br><span class="line"></span><br><span class="line">摘录来自: Nicholas C.Zakas. “JavaScript高级程序设计（第<span class="number">3</span>版）。” iBooks. </span><br><span class="line"></span><br></pre></td></tr></table></figure></p><blockquote><p>这样我们既解决原型链的引用类型被共享的问题，也解决借用构造函数导致的无法复用函数和访问父类型的方法的问题。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;1-原型链&quot;&gt;&lt;a href=&quot;#1-原型链&quot; class=&quot;headerlink&quot; title=&quot;1.原型链&quot;&gt;&lt;/a&gt;1.原型链&lt;/h1&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SuperType&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.property = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SuperType.prototype.getSuperValue = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.property;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SubType&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.subproperty = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//继承了SuperType&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SubType.prototype = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SuperType();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SubType.prototype.getSubValue = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.subproperty;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; instance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SubType();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(instance.getSuperValue());”&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;摘录来自: Nicholas C.Zakas. “JavaScript高级程序设计（第&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;版）。” iBooks. &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;这个方式实现继承最大的问题就是在包含引用类型的原型会被所有实例共享，而导致子类型的实例对这个引用类型的修改可以被其他所有子类型看见。例如：&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="javascript" scheme="http://narutohinata.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Go语言JSON库的使用</title>
    <link href="http://narutohinata.github.io/2018/03/05/Go%E8%AF%AD%E8%A8%80JSON%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://narutohinata.github.io/2018/03/05/Go%E8%AF%AD%E8%A8%80JSON%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2018-03-05T11:52:37.000Z</published>
    <updated>2022-03-29T06:09:06.919Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;jack&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;age&quot;</span>: <span class="number">21</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name <span class="keyword">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">  Age <span class="keyword">int</span> <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user := User&#123;&#125;</span><br><span class="line">json.Unmarshal([]<span class="keyword">byte</span>(jsonStr), &amp;user)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    <category term="golang" scheme="http://narutohinata.github.io/categories/golang/"/>
    
    
    <category term="golang" scheme="http://narutohinata.github.io/tags/golang/"/>
    
    <category term="json" scheme="http://narutohinata.github.io/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>ActiveSupport::Concern实现原理</title>
    <link href="http://narutohinata.github.io/2017/05/11/ActiveSupport-Concern%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://narutohinata.github.io/2017/05/11/ActiveSupport-Concern%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</id>
    <published>2017-05-11T18:12:26.000Z</published>
    <updated>2022-03-29T06:09:06.919Z</updated>
    
    <content type="html"><![CDATA[<p>在<code>Rails</code>中我们经常将可复用的代码放在<code>Concern</code>中以防止<code>fat model</code>具体用法如下(取自rubychina源码)：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启关闭帖子功能</span></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Closeable</span></span></span><br><span class="line">  extend ActiveSupport::Concern</span><br><span class="line"></span><br><span class="line">  included <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">closed?</span></span></span><br><span class="line">    closed_at.present?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">close!</span></span></span><br><span class="line">    transaction <span class="keyword">do</span></span><br><span class="line">      Reply.create_system_event(<span class="symbol">action:</span> <span class="string">&#x27;close&#x27;</span>, <span class="symbol">topic_id:</span> <span class="keyword">self</span>.id)</span><br><span class="line">      update!(<span class="symbol">closed_at:</span> Time.now)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">open!</span></span></span><br><span class="line">    transaction <span class="keyword">do</span></span><br><span class="line">      update!(<span class="symbol">closed_at:</span> <span class="literal">nil</span>)</span><br><span class="line">      Reply.create_system_event(<span class="symbol">action:</span> <span class="string">&#x27;reopen&#x27;</span>, <span class="symbol">topic_id:</span> <span class="keyword">self</span>.id)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Topic</span> &lt; ApplicationRecord</span></span><br><span class="line">  <span class="keyword">include</span> Closeable</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>我们今天就来看看<code>ActiveSupport::Concern</code>是如何实现的，以及它解决了以前的那些痛点?</p><span id="more"></span><h2 id="解决了那些痛点？"><a href="#解决了那些痛点？" class="headerlink" title="解决了那些痛点？"></a>解决了那些痛点？</h2><p>  假设我们有2个模块<code>module A</code>和<code>module B</code>,其中<code>module B</code>包含了<code>module A</code>，然后我们在类<code>Test</code>中<code>include B</code>这个时候类<code>Test</code>的行为是我们预想的不一样：<br>  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">A</span></span></span><br><span class="line">  def <span class="keyword">self</span>.included(base)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 这个base是包含这个模块的module/class</span></span><br><span class="line">  <span class="comment">#  例如：</span></span><br><span class="line">  <span class="comment">#  class Demo</span></span><br><span class="line">  <span class="comment">#    include A</span></span><br><span class="line">  <span class="comment">#  end</span></span><br><span class="line">  <span class="comment">#  此时的base就是Demo</span></span><br><span class="line">  <span class="comment"># </span></span><br><span class="line">    base.extend ClassMethods  <span class="comment">#扩展类方法</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">a_instance_method</span></span></span><br><span class="line">    <span class="string">&quot;a_instance_method&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">module</span> <span class="title">ClassMethods</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">a_class_method</span></span></span><br><span class="line">      <span class="string">&quot;a_class_method&quot;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">B</span></span></span><br><span class="line">  def <span class="keyword">self</span>.included(base)</span><br><span class="line">    base.extend ClassMethods</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">b_instance_method</span></span></span><br><span class="line">    <span class="string">&quot;b_instance_method&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  <span class="class"><span class="keyword">module</span> <span class="title">ClassMethods</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">b_class_method</span></span></span><br><span class="line">      <span class="string">&quot;b_class_method&quot;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">include</span> A <span class="comment"># 注意这里包含了模块A</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line">  <span class="keyword">include</span> B</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Test.new.a_instance_method <span class="comment"># =&gt; &quot;a_instance_method&quot;</span></span><br><span class="line">Test.new.b_instance_method <span class="comment"># =&gt; &quot;b_instance_method&quot;</span></span><br><span class="line"></span><br><span class="line">Test.a_class_method <span class="comment"># =&gt; NoMethodError: undefined method `a_class_method&#x27; for Test:Class</span></span><br><span class="line">Test.b_class_method <span class="comment"># =&gt; &quot;b_class_method&quot;</span></span><br></pre></td></tr></table></figure><br>  我们发现当Test调用<code>a_class_method</code>方法时候抛出了<code>NoMethodError</code>错误。</p><p>  其实我们仔细思考下就知道问题出在哪里了：</p><blockquote><p>我们在模块<code>B</code>中 <code>include</code>了模块<code>A</code>的时候,<code>B</code>充当了<code>base</code>导致<code>A::ClassMethods</code>模块中定义的方法变成了<code>module B</code>的类方法</p></blockquote><p>  而我们的<code>ActiveSupport::Concern</code>就完美的解决了链式包含的问题。接下来我们看下到底是怎么实现的吧。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2>  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">ActiveSupport</span></span></span><br><span class="line">  <span class="class"><span class="keyword">module</span> <span class="title">Concern</span></span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MultipleIncludedBlocks</span> &lt; StandardError <span class="comment">#:nodoc:</span></span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></span><br><span class="line">        <span class="keyword">super</span> <span class="string">&quot;Cannot define multiple &#x27;included&#x27; blocks for a Concern&quot;</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这里设置了一个变量用来标识是否是一个`Concern`模块</span></span><br><span class="line">    def <span class="keyword">self</span>.extended(base) <span class="comment">#:nodoc:</span></span><br><span class="line">      base.instance_variable_set(<span class="symbol">:</span><span class="variable">@_dependencies</span>, [])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># append_features方法是在模块被包含的时候被调用的，里面包含了一个默认实现</span></span><br><span class="line">    <span class="comment"># 用来检查被包含模块是否已经在包含类的祖先链上，如果不在则将该模块加入其祖先链</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append_features</span><span class="params">(base)</span></span></span><br><span class="line">      <span class="keyword">if</span> base.instance_variable_defined?(<span class="symbol">:</span><span class="variable">@_dependencies</span>)</span><br><span class="line">        base.instance_variable_get(<span class="symbol">:</span><span class="variable">@_dependencies</span>) &lt;&lt; <span class="keyword">self</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">if</span> base &lt; <span class="keyword">self</span></span><br><span class="line">        <span class="variable">@_dependencies</span>.each &#123; <span class="params">|dep|</span> base.<span class="keyword">include</span>(dep) &#125;</span><br><span class="line">        <span class="keyword">super</span></span><br><span class="line">        base.extend const_get(<span class="symbol">:ClassMethods</span>) <span class="keyword">if</span> const_defined?(<span class="symbol">:ClassMethods</span>)</span><br><span class="line">        base.class_eval(&amp;<span class="variable">@_included_block</span>) <span class="keyword">if</span> instance_variable_defined?(<span class="symbol">:</span><span class="variable">@_included_block</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">included</span><span class="params">(base = <span class="literal">nil</span>, &amp;block)</span></span></span><br><span class="line">      <span class="keyword">if</span> base.<span class="literal">nil</span>?</span><br><span class="line">        raise MultipleIncludedBlocks <span class="keyword">if</span> instance_variable_defined?(<span class="symbol">:</span><span class="variable">@_included_block</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable">@_included_block</span> = block</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">super</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成模块ClassMethod用来扩展类方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">class_methods</span><span class="params">(&amp;class_methods_module_definition)</span></span></span><br><span class="line">      mod = const_defined?(<span class="symbol">:ClassMethods</span>, <span class="literal">false</span>) ?</span><br><span class="line">        const_get(<span class="symbol">:ClassMethods</span>) :</span><br><span class="line">        const_set(<span class="symbol">:ClassMethods</span>, Module.new)</span><br><span class="line"></span><br><span class="line">      mod.module_eval(&amp;class_methods_module_definition)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>我们发现<code>Concern</code>通过复写了<code>append_features</code>改变了默认的包含行为，我们包含一个模块时<code>Concern</code>会通过<code>@_dependencies</code>检测<code>base</code>是否是一个<code>Concern</code>如果是一个<code>Concern</code>我们就把它加到<code>@_dependencies</code>变量中，同时返回<code>false</code>以指明该模块没有被真正被包含。如果不是一个<code>Concern</code>此时分两种情况：</p><ol><li>当<code>Concern</code>已经出现在包含类的祖先链中(<code>if base &lt; self</code>)我们返回<code>false</code></li><li>当<code>Concern</code>没有出现在包含类的祖先链中，我们将<code>@_dependencies</code>存储的依赖递归去包含(<code>@_dependencies.each &#123; |dep| base.include(dep) &#125;</code>)</li></ol><p>接下来我们也要把自身也加入祖先链中(<code>super</code>)。<br>然后<code>extend</code>方法<code>class_methods</code>所定义的内容，以及使用<code>class_eval</code>在<code>base</code>类中执行<code>included</code>方法中所定义的块</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在&lt;code&gt;Rails&lt;/code&gt;中我们经常将可复用的代码放在&lt;code&gt;Concern&lt;/code&gt;中以防止&lt;code&gt;fat model&lt;/code&gt;具体用法如下(取自rubychina源码)：&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 开启关闭帖子功能&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Closeable&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  extend ActiveSupport::Concern&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  included &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;closed?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    closed_at.present?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;close!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    transaction &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Reply.create_system_event(&lt;span class=&quot;symbol&quot;&gt;action:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;close&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;topic_id:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.id)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      update!(&lt;span class=&quot;symbol&quot;&gt;closed_at:&lt;/span&gt; Time.now)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;open!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    transaction &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      update!(&lt;span class=&quot;symbol&quot;&gt;closed_at:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Reply.create_system_event(&lt;span class=&quot;symbol&quot;&gt;action:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;reopen&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;topic_id:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.id)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Topic&lt;/span&gt; &amp;lt; ApplicationRecord&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; Closeable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们今天就来看看&lt;code&gt;ActiveSupport::Concern&lt;/code&gt;是如何实现的，以及它解决了以前的那些痛点?&lt;/p&gt;</summary>
    
    
    
    
    <category term="activeSupport" scheme="http://narutohinata.github.io/tags/activeSupport/"/>
    
    <category term="rails" scheme="http://narutohinata.github.io/tags/rails/"/>
    
  </entry>
  
</feed>
