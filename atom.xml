<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chromer&#39;s Blog</title>
  
  
  <link href="http://narutohinata.github.io/atom.xml" rel="self"/>
  
  <link href="http://narutohinata.github.io/"/>
  <updated>2022-01-01T15:45:04.159Z</updated>
  <id>http://narutohinata.github.io/</id>
  
  <author>
    <name>chromer</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>为啥Redis使用跳表而不是使用红黑树</title>
    <link href="http://narutohinata.github.io/2020/04/28/%E4%B8%BA%E5%95%A5Redis%E4%BD%BF%E7%94%A8%E8%B7%B3%E8%A1%A8%E8%80%8C%E4%B8%8D%E6%98%AF%E4%BD%BF%E7%94%A8%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    <id>http://narutohinata.github.io/2020/04/28/%E4%B8%BA%E5%95%A5Redis%E4%BD%BF%E7%94%A8%E8%B7%B3%E8%A1%A8%E8%80%8C%E4%B8%8D%E6%98%AF%E4%BD%BF%E7%94%A8%E7%BA%A2%E9%BB%91%E6%A0%91/</id>
    <published>2020-04-28T15:57:29.000Z</published>
    <updated>2022-01-01T15:45:04.159Z</updated>
    
    <content type="html"><![CDATA[<p>There are a few reasons:</p><ol><li>They are not very memory intensive. It’s up to you basically. Changing parameters about the probability of a node to have a given number of levels will make then less memory intensive than btrees.</li><li>A sorted set is often target of many ZRANGE or ZREVRANGE operations, that is, traversing the skip list as a linked list. With this operation the cache locality of skip lists is at least as good as with other kind of balanced trees.</li><li>They are simpler to implement, debug, and so forth. For instance thanks to the skip list simplicity I received a patch (already in Redis master) with augmented skip lists implementing ZRANK in O(log(N)). It required little changes to the code.</li></ol><p>About the Append Only durability &amp; speed, I don’t think it is a good idea to optimize Redis at cost of more code and more complexity for a use case that IMHO should be rare for the Redis target (fsync() at every command). Almost no one is using this feature even with ACID SQL databases, as the performance hint is big anyway.</p><p>About threads: our experience shows that Redis is mostly I/O bound. I’m using threads to serve things from Virtual Memory. The long term solution to exploit all the cores, assuming your link is so fast that you can saturate a single core, is running multiple instances of Redis (no locks, almost fully scalable linearly with number of cores), and using the “Redis Cluster” solution that I plan to develop in the future.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;There are a few reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;They are not very memory intensive. It’s up to you basically. Changing parameters about the probabi</summary>
      
    
    
    
    
    <category term="Redis" scheme="http://narutohinata.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Golang文件操作</title>
    <link href="http://narutohinata.github.io/2020/02/28/Golang%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>http://narutohinata.github.io/2020/02/28/Golang%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</id>
    <published>2020-02-28T15:57:29.000Z</published>
    <updated>2022-01-01T15:45:04.155Z</updated>
    
    <content type="html"><![CDATA[<h2 id="判断文件是否纯在"><a href="#判断文件是否纯在" class="headerlink" title="判断文件是否纯在"></a>判断文件是否纯在</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  stat, err := os.Stat(<span class="string">&quot;~/Demo.txt&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;err is&quot;</span>, err)</span><br><span class="line">    <span class="keyword">if</span> os.IsNotExist(err) &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;文件不纯在&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;文件纯在!&quot;</span>)</span><br><span class="line">    fmt.Println(stat)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件间拷贝"><a href="#文件间拷贝" class="headerlink" title="文件间拷贝"></a>文件间拷贝</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;io&quot;</span></span><br><span class="line">  <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  srcFile, _ := os.OpenFile(<span class="string">&quot;~/in.txt&quot;</span>)</span><br><span class="line">  dstFile, _ := os.OpenFile(<span class="string">&quot;~/out.txt&quot;</span>)</span><br><span class="line">  written, err := io.Copy(dstFile, srcFile)</span><br><span class="line">  <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;拷贝成功, 字节数=&quot;</span>, written)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;拷贝失败，err=&quot;</span>,err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓冲式文件拷贝"><a href="#缓冲式文件拷贝" class="headerlink" title="缓冲式文件拷贝"></a>缓冲式文件拷贝</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//打开源文件</span></span><br><span class="line">srcfile, _ := os.OpenFile(<span class="string">&quot;~/in.txt&quot;</span>, os.O_RDONLY, <span class="number">0666</span>)</span><br><span class="line"><span class="comment">//打开目标文件</span></span><br><span class="line">dstfile, _ := os.OpenFile(<span class="string">&quot;~/out.txt&quot;</span>, os.O_CREATE|os.O_WRONLY, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">srcfile.Close()</span><br><span class="line">dstfile.Close()</span><br><span class="line">fmt.Println(<span class="string">&quot;文件已关闭&quot;</span>)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">reader := bufio.NewReader(srcfile)</span><br><span class="line">writer := bufio.NewWriter(dstfile)</span><br><span class="line">buffer := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1024</span>)</span><br><span class="line"><span class="keyword">for</span>&#123;</span><br><span class="line">_ , err := reader.Read(buffer)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line"><span class="keyword">if</span> err == io.EOF&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;源文件读取完毕&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;error&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">_, err1 := writer.Write(buffer)</span><br><span class="line"><span class="keyword">if</span> err1 != <span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Println(err1)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;判断文件是否纯在&quot;&gt;&lt;a href=&quot;#判断文件是否纯在&quot; class=&quot;headerlink&quot; title=&quot;判断文件是否纯在&quot;&gt;&lt;/a&gt;判断文件是否纯在&lt;/h2&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class</summary>
      
    
    
    
    
    <category term="Golang" scheme="http://narutohinata.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Dom元素的一些宽高计算值</title>
    <link href="http://narutohinata.github.io/2019/03/03/Dom%E5%85%83%E7%B4%A0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%BD%E9%AB%98%E8%AE%A1%E7%AE%97%E5%80%BC/"/>
    <id>http://narutohinata.github.io/2019/03/03/Dom%E5%85%83%E7%B4%A0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%BD%E9%AB%98%E8%AE%A1%E7%AE%97%E5%80%BC/</id>
    <published>2019-03-03T14:45:41.000Z</published>
    <updated>2022-01-01T15:45:04.155Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>R大博客里对闭包的解释【转】</title>
    <link href="http://narutohinata.github.io/2018/06/08/R%E5%A4%A7%E5%8D%9A%E5%AE%A2%E9%87%8C%E5%AF%B9%E9%97%AD%E5%8C%85%E7%9A%84%E8%A7%A3%E9%87%8A%E3%80%90%E8%BD%AC%E3%80%91/"/>
    <id>http://narutohinata.github.io/2018/06/08/R%E5%A4%A7%E5%8D%9A%E5%AE%A2%E9%87%8C%E5%AF%B9%E9%97%AD%E5%8C%85%E7%9A%84%E8%A7%A3%E9%87%8A%E3%80%90%E8%BD%AC%E3%80%91/</id>
    <published>2018-06-08T11:27:49.000Z</published>
    <updated>2022-01-01T15:45:04.155Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="http://rednaxelafx.iteye.com/blog/245022">转自 RednaxelaFX 博客评论</a></p></blockquote><p>我不理解你不理解的是什么……<code>闭包</code>的定义很好理解撒。要点有俩： </p><ol><li>一个含有<code>自由变量</code>的<code>函数</code>； </li><li>这些自由变量所在的<code>环境</code>。</li></ol><p>外部环境持有内部函数所使用的自由变量，对内部函数形成“闭包”，就这样…… 简单但不严格的说，一个函数的“<code>自由变量</code>”就是既不是参数也不是局部变量的变量。 </p><span id="more"></span><p>一个纯粹（无副作用)的函数如果不含有自由变量，那么每次用相同的参数调用后的得到的结果肯定是一样的。但如果一个函数含有自由变量，那么调用返回的结果不但依赖于参数的值，还依赖于自由变量的值。因此一个含有自由变量的函数要正确执行，必须保证其所依赖的外围环境的存在。 </p><p>基于类的面向对象程序语言中有一种情况，就是方法是用的自由变量是来自其所在的类的实例的。像这样： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">AddWith</span><span class="params">( <span class="keyword">int</span> y )</span> </span>&#123; <span class="keyword">return</span> x + y; &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的<code>AddWith()</code>有一个<code>参数y</code>和一个<code>自由变量x</code>，其返回的值既依赖于参数的值也依赖于自由变量的值。为了让<code>AddWith()</code>正确工作，它必须依附于<code>Foo</code>的一个实例，不然就得不到x的值了（称为：“变量i未与值相绑定”）。很好理解对吧。不过面向对象的语言里一般不把类称为闭包，没为什么，就是种习惯。<br>当然严格来说方法所捕获的自由变量不是i，而是<code>this</code>；x是通过this来访问到的，完整写出应该是<code>this.x</code>。 </p><p>如果这个“<code>外围环境</code>”来自一个<code>外围函数</code>，并且内部函数可以作为返回值返回，那么外围函数的局部环境就不能在调用结束时就撤销。也就是说不能在栈上分配空间。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AddWith</span>(<span class="params">x</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">y</span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> x + y  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>这样的内部函数有一个<code>参数y</code>和一个<code>自由变量x</code>。x在外围函数<code>AddWith()</code>里是一个参数，也就是一个“<code>已绑定了值的变量</code>”（bound variable）。<code>AddWith()</code>的局部作用域中含有内部函数所使用的自由变量，对内部函数形成闭包。为了让返回出去的内部函数能正常工作，这个内部函数必须依附于一个能提供x的值的环境，也就是<code>AddWith()</code>提供的闭包。这样我们就能够： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addFive = AddWith(<span class="number">5</span>)  </span><br><span class="line"><span class="keyword">var</span> seven = addFive(<span class="number">2</span>) <span class="comment">// 2+5=7  </span></span><br></pre></td></tr></table></figure><p>全局变量是一种特殊的自由变量。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://rednaxelafx.iteye.com/blog/245022&quot;&gt;转自 RednaxelaFX 博客评论&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我不理解你不理解的是什么……&lt;code&gt;闭包&lt;/code&gt;的定义很好理解撒。要点有俩： &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个含有&lt;code&gt;自由变量&lt;/code&gt;的&lt;code&gt;函数&lt;/code&gt;； &lt;/li&gt;
&lt;li&gt;这些自由变量所在的&lt;code&gt;环境&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;外部环境持有内部函数所使用的自由变量，对内部函数形成“闭包”，就这样…… 简单但不严格的说，一个函数的“&lt;code&gt;自由变量&lt;/code&gt;”就是既不是参数也不是局部变量的变量。 &lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>javascript各排序算法实现</title>
    <link href="http://narutohinata.github.io/2018/06/06/javascript%E5%90%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/"/>
    <id>http://narutohinata.github.io/2018/06/06/javascript%E5%90%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</id>
    <published>2018-06-06T11:14:34.000Z</published>
    <updated>2022-01-01T15:45:04.159Z</updated>
    
    <content type="html"><![CDATA[<ol><li>冒泡排序(普通版)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble_sort</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = data.length - <span class="number">1</span>; i &gt; <span class="number">0</span> ; i-- )&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (data[j] &gt; data[j+<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = data[j+<span class="number">1</span>];</span><br><span class="line">        data[j+<span class="number">1</span>] = data[j];</span><br><span class="line">        data[j] = tmp;</span><br><span class="line">      &#125;      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>冒泡排序（改良版1)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble_sort1</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = data.length - <span class="number">1</span>; i &gt; <span class="number">0</span> ; i-- )&#123;</span><br><span class="line">    <span class="keyword">let</span> tag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (data[j] &gt; data[j+<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = data[j+<span class="number">1</span>];</span><br><span class="line">        data[j+<span class="number">1</span>] = data[j];</span><br><span class="line">        data[j] = tmp;</span><br><span class="line">        tag = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tag) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>这里说下改良版的思路，上一个版本没有记录上一趟冒泡的排序状态，导致必须执行<code>n-1</code>趟排序。考虑最好的情况，如果一开始序列就是有序的，如果使用第一种排序的话，导致可以<code>O(n)</code>的解决的问题花了<code>O(n^2)</code>的时间了，这显然是不合适的，于是我们在每一趟排序开始前，设置一个表示序列是否有序的状态量(<code>let tag</code>)，并认为一开始是有序的(<code>true</code>)，然后在交换排序过程中一旦发生了交换就把状态量设置为无序状态（<code>false</code>)。然后在进行下一趟排序的时候检查这个状态量，如果是<code>true</code>则说明序列此时已经有序无需进行下一趟了直接返回就行了，如果为<code>false</code>则表示序列此时还是无序状态则需要进行下一趟排序。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;冒泡排序(普通版)&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;</summary>
      
    
    
    
    <category term="javascript" scheme="http://narutohinata.github.io/categories/javascript/"/>
    
    
    <category term="算法" scheme="http://narutohinata.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>R语言语法【一】</title>
    <link href="http://narutohinata.github.io/2018/05/08/R%E8%AF%AD%E8%A8%80%E8%AF%AD%E6%B3%95%E3%80%90%E4%B8%80%E3%80%91/"/>
    <id>http://narutohinata.github.io/2018/05/08/R%E8%AF%AD%E8%A8%80%E8%AF%AD%E6%B3%95%E3%80%90%E4%B8%80%E3%80%91/</id>
    <published>2018-05-08T20:14:18.000Z</published>
    <updated>2022-01-01T15:45:04.159Z</updated>
    
    <content type="html"><![CDATA[<h1 id="赋值语法"><a href="#赋值语法" class="headerlink" title="赋值语法"></a>赋值语法</h1><p>在R语言中赋值使用<code>&lt;-</code>,比如下面把10赋值给变量a:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a&lt;-<span class="number">10</span></span><br></pre></td></tr></table></figure><span id="more"></span><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;赋值语法&quot;&gt;&lt;a href=&quot;#赋值语法&quot; class=&quot;headerlink&quot; title=&quot;赋值语法&quot;&gt;&lt;/a&gt;赋值语法&lt;/h1&gt;&lt;p&gt;在R语言中赋值使用&lt;code&gt;&amp;lt;-&lt;/code&gt;,比如下面把10赋值给变量a:&lt;/p&gt;
&lt;figure class=&quot;highlight r&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a&amp;lt;-&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="R语言" scheme="http://narutohinata.github.io/tags/R%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs代码片段</title>
    <link href="http://narutohinata.github.io/2018/05/08/Nodejs%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    <id>http://narutohinata.github.io/2018/05/08/Nodejs%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</id>
    <published>2018-05-08T17:38:24.000Z</published>
    <updated>2022-01-01T15:45:04.155Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nodejs-Base64编码和解码"><a href="#Nodejs-Base64编码和解码" class="headerlink" title="Nodejs Base64编码和解码"></a>Nodejs <code>Base64</code>编码和解码</h1><ol><li><p>Base64编码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;我爱js&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> decode_str = Buffer.from(str).toString(<span class="string">&#x27;base64&#x27;</span>) <span class="comment">// &gt; &#x27;5oiR54ixanM=&#x27;</span></span><br><span class="line"><span class="comment">// 或者这样：new Buffer(str).toString(&#x27;base64&#x27;) 【已弃用】</span></span><br></pre></td></tr></table></figure></li><li><p>Base64解码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> decode_str = <span class="string">&#x27;5oiR54ixanM=&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> str = Buffer.from(decode_str, <span class="string">&#x27;base64&#x27;</span>).toString() <span class="comment">// &gt; 我爱js</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Nodejs-Base64编码和解码&quot;&gt;&lt;a href=&quot;#Nodejs-Base64编码和解码&quot; class=&quot;headerlink&quot; title=&quot;Nodejs Base64编码和解码&quot;&gt;&lt;/a&gt;Nodejs &lt;code&gt;Base64&lt;/code&gt;编码和解码&lt;</summary>
      
    
    
    
    
    <category term="Nodejs 代码片段 Tips" scheme="http://narutohinata.github.io/tags/Nodejs-%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5-Tips/"/>
    
  </entry>
  
  <entry>
    <title>mongodb下n:m关系</title>
    <link href="http://narutohinata.github.io/2018/04/29/mongodb%E4%B8%8Bn-m%E5%85%B3%E7%B3%BB/"/>
    <id>http://narutohinata.github.io/2018/04/29/mongodb%E4%B8%8Bn-m%E5%85%B3%E7%B3%BB/</id>
    <published>2018-04-29T10:46:39.000Z</published>
    <updated>2022-01-01T15:45:04.159Z</updated>
    
    <content type="html"><![CDATA[<p>在用户关注系统中关注人和被关注人是<code>多对多关系</code>,在关系型数据库中我们很容易通过中间表关联实现这个功能。关注和取消关注无非就是对这个中间表的记录的增加和删除。那么在<code>mongodb</code>中如何实现这种多对多关系呢？我们知道<code>关注操作</code>就是<code>被关注操作</code>的逆操作，当用户<code>A</code>关注用户<code>B</code>的时候,也就是用户<code>B</code>被用户<code>A</code>关注了。那么我们可以在用户文档中维护一个用户关注的用户集合<code>followings</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  username: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">  followings: [ObjectId]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  username: <span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">  followings: [ObjectId]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><ol><li>那么用户<code>A</code>关注的<code>B</code>的操作我们就可以这么写了:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = db.users.findOne(&#123; <span class="attr">username</span>: <span class="string">&#x27;B&#x27;</span> &#125;);</span><br><span class="line">db.users.updateOne(</span><br><span class="line">  &#123; <span class="attr">username</span>: <span class="string">&#x27;A&#x27;</span> &#125;,</span><br><span class="line">  &#123; </span><br><span class="line">    $push: &#123; <span class="attr">followings</span>: b._id &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></li><li>那么用户<code>A</code>取消关注的<code>B</code>的操作我们就可以这么写了:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = db.users.findOne(&#123; <span class="attr">username</span>: <span class="string">&#x27;B&#x27;</span> &#125;);</span><br><span class="line">db.users.updateOne(</span><br><span class="line">  &#123; <span class="attr">username</span>: <span class="string">&#x27;A&#x27;</span> &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    $pull: &#123; <span class="attr">followings</span>: b._id &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;在用户关注系统中关注人和被关注人是&lt;code&gt;多对多关系&lt;/code&gt;,在关系型数据库中我们很容易通过中间表关联实现这个功能。关注和取消关注无非就是对这个中间表的记录的增加和删除。那么在&lt;code&gt;mongodb&lt;/code&gt;中如何实现这种多对多关系呢？我们知道&lt;code&gt;关注操作&lt;/code&gt;就是&lt;code&gt;被关注操作&lt;/code&gt;的逆操作，当用户&lt;code&gt;A&lt;/code&gt;关注用户&lt;code&gt;B&lt;/code&gt;的时候,也就是用户&lt;code&gt;B&lt;/code&gt;被用户&lt;code&gt;A&lt;/code&gt;关注了。那么我们可以在用户文档中维护一个用户关注的用户集合&lt;code&gt;followings&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  username: &lt;span class=&quot;string&quot;&gt;&amp;#x27;A&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  followings: [ObjectId]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  username: &lt;span class=&quot;string&quot;&gt;&amp;#x27;B&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  followings: [ObjectId]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>我的代码小片段</title>
    <link href="http://narutohinata.github.io/2018/04/28/%E6%88%91%E7%9A%84%E4%BB%A3%E7%A0%81%E5%B0%8F%E7%89%87%E6%AE%B5/"/>
    <id>http://narutohinata.github.io/2018/04/28/%E6%88%91%E7%9A%84%E4%BB%A3%E7%A0%81%E5%B0%8F%E7%89%87%E6%AE%B5/</id>
    <published>2018-04-28T15:57:29.000Z</published>
    <updated>2022-01-01T15:45:04.159Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>获取cookie</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cookies = <span class="built_in">document</span>.cookie;</span><br><span class="line">  <span class="keyword">let</span> _cookies = cookies.split(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> _cookies.reduce(<span class="function">(<span class="params">a, cookie</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> _cookie = cookie.split(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.assign(a, &#123; [_cookie[<span class="number">0</span>]]: _cookie[<span class="number">1</span>]&#125;);</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><span id="more"></span></li><li><p>深拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> deep_clone = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> clonedObj;</span><br><span class="line">  <span class="comment">// Handle null or undefine or primitive type</span></span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span> || <span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Handle Array</span></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">    clonedObj = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; obj.length; index++) &#123;</span><br><span class="line">      clonedObj[index] = deep_clone(obj[index]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> clonedObj;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Handle Date</span></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">    clonedObj = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    clonedObj.setDate(obj.getDate());</span><br><span class="line">    <span class="keyword">return</span> clonedObj;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Handle Object</span></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">    clonedObj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">        clonedObj[key] = deep_clone(obj[key]);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> clonedObj;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;cannot clone this&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>翻转数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 翻转数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr = arr || [];</span><br><span class="line">  <span class="keyword">if</span> (arr.length === <span class="number">0</span>) <span class="keyword">return</span> [];</span><br><span class="line">  <span class="keyword">var</span> temp_arr = copy_array(arr);</span><br><span class="line">  <span class="keyword">var</span> length = temp_arr.length;</span><br><span class="line">  <span class="keyword">var</span> index = length,</span><br><span class="line">      new_index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(--index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> value = temp_arr[index];</span><br><span class="line">    <span class="built_in">console</span>.log();</span><br><span class="line">    arr[new_index++] = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拷贝数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy_array</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;argument is not array&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> index = -<span class="number">1</span>,</span><br><span class="line">      length = arr.length,</span><br><span class="line">      resIndex = <span class="number">0</span>,</span><br><span class="line">      result = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(++index &lt; length) &#123;</span><br><span class="line">    <span class="keyword">var</span> value = arr[index];</span><br><span class="line">    result[resIndex++] = value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;获取cookie&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getCookie&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; cookies = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.cookie;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; _cookies = cookies.split(&lt;span class=&quot;string&quot;&gt;&amp;quot;;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _cookies.reduce(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;a, cookie&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; _cookie = cookie.split(&lt;span class=&quot;string&quot;&gt;&amp;quot;=&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(a, &amp;#123; [_cookie[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]]: _cookie[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;, &amp;#123;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>MongonDB中的1:m关系</title>
    <link href="http://narutohinata.github.io/2018/04/28/MongoDB%E4%B8%AD%E7%9A%841:m%E5%85%B3%E7%B3%BB/"/>
    <id>http://narutohinata.github.io/2018/04/28/MongoDB%E4%B8%AD%E7%9A%841:m%E5%85%B3%E7%B3%BB/</id>
    <published>2018-04-28T13:15:05.000Z</published>
    <updated>2022-01-01T15:45:04.155Z</updated>
    
    <content type="html"><![CDATA[<p>在博客系统中用户(user)和博文(post)是1对多关系,在mongodb中我们怎么表述这种关系呢？在mongo中我们可以利用在多端保存1端的<code>ObjectId</code>来维持这种<code>1:m</code>关系,下面分别列出<code>user</code>和<code>post</code>的结构:</p><ol><li><code>user</code>的结构<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5ae3caa35ece85125d2429f7&quot;</span>),</span><br><span class="line">    <span class="attr">&quot;username&quot;</span> : <span class="string">&quot;百思可乐1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;password&quot;</span> : <span class="string">&quot;123456&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span> : <span class="number">21</span>,</span><br><span class="line">    <span class="attr">&quot;updateAt&quot;</span> : ISODate(<span class="string">&quot;2018-04-28T01:11:54.698Z&quot;</span>),</span><br><span class="line">    <span class="attr">&quot;createdAt&quot;</span> : ISODate(<span class="string">&quot;2018-04-28T01:11:54.698Z&quot;</span>),</span><br><span class="line">    <span class="attr">&quot;__v&quot;</span> : <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><span id="more"></span><ol start="2"><li><code>post</code>的结构<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5ae3384594aa810f8d17f073&quot;</span>),</span><br><span class="line">    <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;ruby&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;body&quot;</span> : <span class="string">&quot;sdasda&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;author&quot;</span> : ObjectId(<span class="string">&quot;5ae3caa35ece85125d2429f7&quot;</span>),</span><br><span class="line">    <span class="attr">&quot;__v&quot;</span> : <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>上面我们可以看到我们在<code>post</code>document里添加个一个<code>author</code>的字段里面保存了<code>user</code>的<code>ObjectId</code>.</p><p>于是我们就可以执行下面这些操作了:</p><ol><li><p>查询一个用户发布的所有文章</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = db.user.findOne();</span><br><span class="line"><span class="keyword">var</span> posts = db.post.find(&#123;<span class="attr">author</span>: user._id&#125;);</span><br></pre></td></tr></table></figure></li><li><p>查询一篇文章的作者</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> post = db.post.findOne();</span><br><span class="line"><span class="keyword">var</span> user = db.user.findOne(&#123;<span class="attr">author</span>: post.author &#125;);</span><br></pre></td></tr></table></figure></li><li><p>用户创建文章</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = db.user.findOne();</span><br><span class="line"><span class="keyword">var</span> posts = db.post.insert(</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">&quot;ruby&quot;</span>,</span><br><span class="line">    body: <span class="string">&quot;sdasda&quot;</span>,</span><br><span class="line">    author: user._id</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;在博客系统中用户(user)和博文(post)是1对多关系,在mongodb中我们怎么表述这种关系呢？在mongo中我们可以利用在多端保存1端的&lt;code&gt;ObjectId&lt;/code&gt;来维持这种&lt;code&gt;1:m&lt;/code&gt;关系,下面分别列出&lt;code&gt;user&lt;/code&gt;和&lt;code&gt;post&lt;/code&gt;的结构:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;user&lt;/code&gt;的结构&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; : ObjectId(&lt;span class=&quot;string&quot;&gt;&amp;quot;5ae3caa35ece85125d2429f7&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;username&amp;quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&amp;quot;百思可乐1&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;password&amp;quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&amp;quot;123456&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;updateAt&amp;quot;&lt;/span&gt; : ISODate(&lt;span class=&quot;string&quot;&gt;&amp;quot;2018-04-28T01:11:54.698Z&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;createdAt&amp;quot;&lt;/span&gt; : ISODate(&lt;span class=&quot;string&quot;&gt;&amp;quot;2018-04-28T01:11:54.698Z&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;__v&amp;quot;&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Node模块列表</title>
    <link href="http://narutohinata.github.io/2018/04/10/Node%E6%A8%A1%E5%9D%97%E5%88%97%E8%A1%A8/"/>
    <id>http://narutohinata.github.io/2018/04/10/Node%E6%A8%A1%E5%9D%97%E5%88%97%E8%A1%A8/</id>
    <published>2018-04-10T14:42:13.000Z</published>
    <updated>2022-01-01T15:45:04.155Z</updated>
    
    <content type="html"><![CDATA[<ol><li>读写Excel文件 <a href="https://github.com/guyonroche/exceljs">ExcelJs</a></li><li>时间格式化工具 <a href="https://date-fns.org/">date-fns</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;读写Excel文件 &lt;a href=&quot;https://github.com/guyonroche/exceljs&quot;&gt;ExcelJs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;时间格式化工具 &lt;a href=&quot;https://date-fns.org/&quot;&gt;date-fns&lt;/a&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>javascript中的继承</title>
    <link href="http://narutohinata.github.io/2018/04/06/javascript%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF/"/>
    <id>http://narutohinata.github.io/2018/04/06/javascript%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF/</id>
    <published>2018-04-06T20:55:18.000Z</published>
    <updated>2022-01-01T15:45:04.159Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-原型链"><a href="#1-原型链" class="headerlink" title="1.原型链"></a>1.原型链</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.property = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.property;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.subproperty = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承了SuperType</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line"></span><br><span class="line">SubType.prototype.getSubValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.subproperty;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SubType();</span><br><span class="line">alert(instance.getSuperValue());”</span><br><span class="line"></span><br><span class="line">摘录来自: Nicholas C.Zakas. “JavaScript高级程序设计（第<span class="number">3</span>版）。” iBooks. </span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这个方式实现继承最大的问题就是在包含引用类型的原型会被所有实例共享，而导致子类型的实例对这个引用类型的修改可以被其他所有子类型看见。例如：</p></blockquote><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;            </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承了SuperType</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType();</span><br><span class="line">instance1.colors.push(<span class="string">&quot;black&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance1.colors);        <span class="comment">//&quot;red,blue,green,black&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType();</span><br><span class="line"><span class="built_in">console</span>.log(instance2.colors);        <span class="comment">//&quot;red,blue,green,black”</span></span><br><span class="line"></span><br><span class="line">摘录来自: Nicholas C.Zakas. “JavaScript高级程序设计（第<span class="number">3</span>版）。” iBooks. </span><br></pre></td></tr></table></figure><p>子类型实例<code>instance2</code>修改应用类型属性<code>color</code>,导致其他子类型的实例的<code>color</code>属性也被修改了。(因为<code>color</code>是原型上的一个属性是被所有实例共享的)</p><h1 id="2-借用构造函数"><a href="#2-借用构造函数" class="headerlink" title="2.借用构造函数"></a>2.借用构造函数</h1><p>为了解决引用类型属性在原型上所导致的问题。我们可以在子类型的构造函数中使用父类型的构造函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">  <span class="comment">// 借用父类型的构造函数</span></span><br><span class="line">  SuperType.call(<span class="built_in">this</span>);          </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType();</span><br><span class="line">instance1.colors.push(<span class="string">&quot;black&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance1.colors);        <span class="comment">//&quot;red,blue,green,black&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType();</span><br><span class="line"><span class="built_in">console</span>.log(instance2.colors);        <span class="comment">//&quot;red,blue,green&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>借用构造函数虽然解决了原型链继承所带来的问题，但是由于方法都在构造函数中定义导致无法复用函数。而且父类型的方法对子类型也是不可见的。</p></blockquote><h1 id="3-组合继承"><a href="#3-组合继承" class="headerlink" title="3.组合继承"></a>3.组合继承</h1><p>既然原型链继承和借用构造函数继承都有缺陷，那我们把它们结合起来互补，不就解决了问题了吗？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>)</span>&#123;  </span><br><span class="line">    <span class="comment">//继承属性</span></span><br><span class="line">    SuperType.call(<span class="built_in">this</span>, name);</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 指定原型</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line"></span><br><span class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="built_in">this</span>.age);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType(<span class="string">&quot;Nicholas&quot;</span>, <span class="number">29</span>);</span><br><span class="line">instance1.colors.push(<span class="string">&quot;black&quot;</span>);</span><br><span class="line">alert(instance1.colors);      <span class="comment">//&quot;red,blue,green,black&quot;</span></span><br><span class="line">instance1.sayName();          <span class="comment">//&quot;Nicholas&quot;;</span></span><br><span class="line">instance1.sayAge();           <span class="comment">//29</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType(<span class="string">&quot;Greg&quot;</span>, <span class="number">27</span>);</span><br><span class="line">alert(instance2.colors);      <span class="comment">//&quot;red,blue,green&quot;</span></span><br><span class="line">instance2.sayName();          <span class="comment">//&quot;Greg&quot;;</span></span><br><span class="line">instance2.sayAge();           <span class="comment">//27”</span></span><br><span class="line"></span><br><span class="line">摘录来自: Nicholas C.Zakas. “JavaScript高级程序设计（第<span class="number">3</span>版）。” iBooks. </span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这样我们既解决原型链的引用类型被共享的问题，也解决借用构造函数导致的无法复用函数和访问父类型的方法的问题。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;1-原型链&quot;&gt;&lt;a href=&quot;#1-原型链&quot; class=&quot;headerlink&quot; title=&quot;1.原型链&quot;&gt;&lt;/a&gt;1.原型链&lt;/h1&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SuperType&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.property = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SuperType.prototype.getSuperValue = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.property;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SubType&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.subproperty = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//继承了SuperType&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SubType.prototype = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SuperType();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SubType.prototype.getSubValue = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.subproperty;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; instance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SubType();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(instance.getSuperValue());”&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;摘录来自: Nicholas C.Zakas. “JavaScript高级程序设计（第&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;版）。” iBooks. &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;这个方式实现继承最大的问题就是在包含引用类型的原型会被所有实例共享，而导致子类型的实例对这个引用类型的修改可以被其他所有子类型看见。例如：&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="javascript" scheme="http://narutohinata.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Go语言JSON库的使用</title>
    <link href="http://narutohinata.github.io/2018/03/05/Go%E8%AF%AD%E8%A8%80JSON%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://narutohinata.github.io/2018/03/05/Go%E8%AF%AD%E8%A8%80JSON%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2018-03-05T11:52:37.000Z</published>
    <updated>2022-01-01T15:45:04.155Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;jack&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;age&quot;</span>: <span class="number">21</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name <span class="keyword">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">  Age <span class="keyword">int</span> <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user := User&#123;&#125;</span><br><span class="line">json.Unmarshal([]<span class="keyword">byte</span>(jsonStr), &amp;user)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    <category term="Ruby" scheme="http://narutohinata.github.io/categories/Ruby/"/>
    
    
    <category term="Rails" scheme="http://narutohinata.github.io/tags/Rails/"/>
    
  </entry>
  
  <entry>
    <title>ActiveSupport::Concern实现原理</title>
    <link href="http://narutohinata.github.io/2017/05/11/ActiveSupport-Concern%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://narutohinata.github.io/2017/05/11/ActiveSupport-Concern%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</id>
    <published>2017-05-11T18:12:26.000Z</published>
    <updated>2022-01-01T15:45:04.155Z</updated>
    
    <content type="html"><![CDATA[<p>在<code>Rails</code>中我们经常将可复用的代码放在<code>Concern</code>中以防止<code>fat model</code>具体用法如下(取自rubychina源码)：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启关闭帖子功能</span></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Closeable</span></span></span><br><span class="line">  extend ActiveSupport::Concern</span><br><span class="line"></span><br><span class="line">  included <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">closed?</span></span></span><br><span class="line">    closed_at.present?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">close!</span></span></span><br><span class="line">    transaction <span class="keyword">do</span></span><br><span class="line">      Reply.create_system_event(<span class="symbol">action:</span> <span class="string">&#x27;close&#x27;</span>, <span class="symbol">topic_id:</span> <span class="keyword">self</span>.id)</span><br><span class="line">      update!(<span class="symbol">closed_at:</span> Time.now)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">open!</span></span></span><br><span class="line">    transaction <span class="keyword">do</span></span><br><span class="line">      update!(<span class="symbol">closed_at:</span> <span class="literal">nil</span>)</span><br><span class="line">      Reply.create_system_event(<span class="symbol">action:</span> <span class="string">&#x27;reopen&#x27;</span>, <span class="symbol">topic_id:</span> <span class="keyword">self</span>.id)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Topic</span> &lt; ApplicationRecord</span></span><br><span class="line">  <span class="keyword">include</span> Closeable</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>我们今天就来看看<code>ActiveSupport::Concern</code>是如何实现的，以及它解决了以前的那些痛点?</p><span id="more"></span><h2 id="解决了那些痛点？"><a href="#解决了那些痛点？" class="headerlink" title="解决了那些痛点？"></a>解决了那些痛点？</h2><p>  假设我们有2个模块<code>module A</code>和<code>module B</code>,其中<code>module B</code>包含了<code>module A</code>，然后我们在类<code>Test</code>中<code>include B</code>这个时候类<code>Test</code>的行为是我们预想的不一样：<br>  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">A</span></span></span><br><span class="line">  def <span class="keyword">self</span>.included(base)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 这个base是包含这个模块的module/class</span></span><br><span class="line">  <span class="comment">#  例如：</span></span><br><span class="line">  <span class="comment">#  class Demo</span></span><br><span class="line">  <span class="comment">#    include A</span></span><br><span class="line">  <span class="comment">#  end</span></span><br><span class="line">  <span class="comment">#  此时的base就是Demo</span></span><br><span class="line">  <span class="comment"># </span></span><br><span class="line">    base.extend ClassMethods  <span class="comment">#扩展类方法</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">a_instance_method</span></span></span><br><span class="line">    <span class="string">&quot;a_instance_method&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">module</span> <span class="title">ClassMethods</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">a_class_method</span></span></span><br><span class="line">      <span class="string">&quot;a_class_method&quot;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">B</span></span></span><br><span class="line">  def <span class="keyword">self</span>.included(base)</span><br><span class="line">    base.extend ClassMethods</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">b_instance_method</span></span></span><br><span class="line">    <span class="string">&quot;b_instance_method&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  <span class="class"><span class="keyword">module</span> <span class="title">ClassMethods</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">b_class_method</span></span></span><br><span class="line">      <span class="string">&quot;b_class_method&quot;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">include</span> A <span class="comment"># 注意这里包含了模块A</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line">  <span class="keyword">include</span> B</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Test.new.a_instance_method <span class="comment"># =&gt; &quot;a_instance_method&quot;</span></span><br><span class="line">Test.new.b_instance_method <span class="comment"># =&gt; &quot;b_instance_method&quot;</span></span><br><span class="line"></span><br><span class="line">Test.a_class_method <span class="comment"># =&gt; NoMethodError: undefined method `a_class_method&#x27; for Test:Class</span></span><br><span class="line">Test.b_class_method <span class="comment"># =&gt; &quot;b_class_method&quot;</span></span><br></pre></td></tr></table></figure><br>  我们发现当Test调用<code>a_class_method</code>方法时候抛出了<code>NoMethodError</code>错误。</p><p>  其实我们仔细思考下就知道问题出在哪里了：</p><blockquote><p>我们在模块<code>B</code>中 <code>include</code>了模块<code>A</code>的时候,<code>B</code>充当了<code>base</code>导致<code>A::ClassMethods</code>模块中定义的方法变成了<code>module B</code>的类方法</p></blockquote><p>  而我们的<code>ActiveSupport::Concern</code>就完美的解决了链式包含的问题。接下来我们看下到底是怎么实现的吧。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2>  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">ActiveSupport</span></span></span><br><span class="line">  <span class="class"><span class="keyword">module</span> <span class="title">Concern</span></span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MultipleIncludedBlocks</span> &lt; StandardError <span class="comment">#:nodoc:</span></span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></span><br><span class="line">        <span class="keyword">super</span> <span class="string">&quot;Cannot define multiple &#x27;included&#x27; blocks for a Concern&quot;</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这里设置了一个变量用来标识是否是一个`Concern`模块</span></span><br><span class="line">    def <span class="keyword">self</span>.extended(base) <span class="comment">#:nodoc:</span></span><br><span class="line">      base.instance_variable_set(<span class="symbol">:</span><span class="variable">@_dependencies</span>, [])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># append_features方法是在模块被包含的时候被调用的，里面包含了一个默认实现</span></span><br><span class="line">    <span class="comment"># 用来检查被包含模块是否已经在包含类的祖先链上，如果不在则将该模块加入其祖先链</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append_features</span><span class="params">(base)</span></span></span><br><span class="line">      <span class="keyword">if</span> base.instance_variable_defined?(<span class="symbol">:</span><span class="variable">@_dependencies</span>)</span><br><span class="line">        base.instance_variable_get(<span class="symbol">:</span><span class="variable">@_dependencies</span>) &lt;&lt; <span class="keyword">self</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">if</span> base &lt; <span class="keyword">self</span></span><br><span class="line">        <span class="variable">@_dependencies</span>.each &#123; <span class="params">|dep|</span> base.<span class="keyword">include</span>(dep) &#125;</span><br><span class="line">        <span class="keyword">super</span></span><br><span class="line">        base.extend const_get(<span class="symbol">:ClassMethods</span>) <span class="keyword">if</span> const_defined?(<span class="symbol">:ClassMethods</span>)</span><br><span class="line">        base.class_eval(&amp;<span class="variable">@_included_block</span>) <span class="keyword">if</span> instance_variable_defined?(<span class="symbol">:</span><span class="variable">@_included_block</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">included</span><span class="params">(base = <span class="literal">nil</span>, &amp;block)</span></span></span><br><span class="line">      <span class="keyword">if</span> base.<span class="literal">nil</span>?</span><br><span class="line">        raise MultipleIncludedBlocks <span class="keyword">if</span> instance_variable_defined?(<span class="symbol">:</span><span class="variable">@_included_block</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable">@_included_block</span> = block</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">super</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成模块ClassMethod用来扩展类方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">class_methods</span><span class="params">(&amp;class_methods_module_definition)</span></span></span><br><span class="line">      mod = const_defined?(<span class="symbol">:ClassMethods</span>, <span class="literal">false</span>) ?</span><br><span class="line">        const_get(<span class="symbol">:ClassMethods</span>) <span class="symbol">:</span></span><br><span class="line">        const_set(<span class="symbol">:ClassMethods</span>, Module.new)</span><br><span class="line"></span><br><span class="line">      mod.module_eval(&amp;class_methods_module_definition)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>我们发现<code>Concern</code>通过复写了<code>append_features</code>改变了默认的包含行为，我们包含一个模块时<code>Concern</code>会通过<code>@_dependencies</code>检测<code>base</code>是否是一个<code>Concern</code>如果是一个<code>Concern</code>我们就把它加到<code>@_dependencies</code>变量中，同时返回<code>false</code>以指明该模块没有被真正被包含。如果不是一个<code>Concern</code>此时分两种情况：</p><ol><li>当<code>Concern</code>已经出现在包含类的祖先链中(<code>if base &lt; self</code>)我们返回<code>false</code></li><li>当<code>Concern</code>没有出现在包含类的祖先链中，我们将<code>@_dependencies</code>存储的依赖递归去包含(<code> @_dependencies.each &#123; |dep| base.include(dep) &#125;</code>)</li></ol><p>接下来我们也要把自身也加入祖先链中(<code>super</code>)。<br>然后<code>extend</code>方法<code>class_methods</code>所定义的内容，以及使用<code>class_eval</code>在<code>base</code>类中执行<code>included</code>方法中所定义的块</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在&lt;code&gt;Rails&lt;/code&gt;中我们经常将可复用的代码放在&lt;code&gt;Concern&lt;/code&gt;中以防止&lt;code&gt;fat model&lt;/code&gt;具体用法如下(取自rubychina源码)：&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 开启关闭帖子功能&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Closeable&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  extend ActiveSupport::Concern&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  included &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;closed?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    closed_at.present?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;close!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    transaction &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Reply.create_system_event(&lt;span class=&quot;symbol&quot;&gt;action:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;close&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;topic_id:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.id)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      update!(&lt;span class=&quot;symbol&quot;&gt;closed_at:&lt;/span&gt; Time.now)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;open!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    transaction &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      update!(&lt;span class=&quot;symbol&quot;&gt;closed_at:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Reply.create_system_event(&lt;span class=&quot;symbol&quot;&gt;action:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;reopen&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;topic_id:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.id)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Topic&lt;/span&gt; &amp;lt; ApplicationRecord&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; Closeable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;我们今天就来看看&lt;code&gt;ActiveSupport::Concern&lt;/code&gt;是如何实现的，以及它解决了以前的那些痛点?&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>ActiveRecord里的Scope实现原理</title>
    <link href="http://narutohinata.github.io/2017/03/05/ActiveRecord%E9%87%8C%E7%9A%84Scope%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://narutohinata.github.io/2017/03/05/ActiveRecord%E9%87%8C%E7%9A%84Scope%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</id>
    <published>2017-03-05T11:52:37.000Z</published>
    <updated>2022-01-01T15:45:04.155Z</updated>
    
    <content type="html"><![CDATA[<h1 id="scope的用法"><a href="#scope的用法" class="headerlink" title="scope的用法"></a>scope的用法</h1><p><code>scope</code>是我们在<code>rails</code>应用中简化代码的一个重要的工具。比如我们有个<code>Post</code>模型，这个模型有个<code>published</code>的布尔类型的字段用来区分文章是否发布。当我们需要查询所有的已发布文章的集合时候，我们首先想到的是这样写：</p><span id="more"></span><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostsController</span> &lt; ApplicationController</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">index</span></span></span><br><span class="line">   <span class="variable">@posts</span> = Post.where(<span class="symbol">published:</span> <span class="literal">true</span>)</span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>但是这样子写导致我们把数据查询的逻辑搬到了<code>Controller</code>层,随着业务的复杂我们<code>Controller</code>会充斥着大量这样的代码导致可读性很低。这个时候我们可以借助<code>ActiveRecord</code>给我们提供的<code>scope</code>方法把这些数据查询逻辑封装到<code>Model</code>层中。代码如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># model/post.rb</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Post</span> &lt; ApplicationRecord</span></span><br><span class="line">   scope <span class="symbol">:published</span>, where(<span class="symbol">published:</span> <span class="literal">true</span>)</span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># controller/posts_controller.rb</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">PostsController</span> &lt; ApplicationController</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">index</span></span></span><br><span class="line">   <span class="variable">@posts</span> = Post.published</span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>看这样一整理我们的<code>Controller</code>是不是变得很干净了，而且可读性大大增加。</p><h1 id="scope的实现原理"><a href="#scope的实现原理" class="headerlink" title="scope的实现原理"></a>scope的实现原理</h1><p>今天我们来看看<code>ActiveRecord</code>给我们提供的这个<code>scope</code>到底是怎么实现的。在看源码之前我们先看看上面我们写的<code>scope</code>的用法，不难发现这个<code>scope</code>是个类宏，并且执行了这个类宏后它会给我们在当前类中定义一个类方法，方法名就是我们给<code>scope</code>传递的第一个参数，并且这个方法执行的是我们给<code>scope</code>传递的第二个参数。例如，我们这么定义一个<code>scope</code>: <code>scope :locked, where(locked: true)</code>,这会给当前类定义一个名为<code>locked</code>的类方法,并且这个类方法执行<code>where(locked: true)</code>这个语句。带这个这个猜想我们现在来看看源码是怎么实现这个功能的吧。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scope</span><span class="params">(name, body, &amp;block)</span></span></span><br><span class="line">  <span class="keyword">unless</span> body.respond_to?(<span class="symbol">:call</span>)</span><br><span class="line">    raise ArgumentError, <span class="string">&quot;The scope body needs to be callable.&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> dangerous_class_method?(name)</span><br><span class="line">    raise ArgumentError, <span class="string">&quot;You tried to define a scope named \&quot;<span class="subst">#&#123;name&#125;</span>\&quot; &quot;</span> \</span><br><span class="line">      <span class="string">&quot;on the model \&quot;<span class="subst">#&#123;<span class="keyword">self</span>.name&#125;</span>\&quot;, but Active Record already defined &quot;</span> \</span><br><span class="line">      <span class="string">&quot;a class method with the same name.&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  valid_scope_name?(name)</span><br><span class="line">  extension = Module.new(&amp;block) <span class="keyword">if</span> block</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> body.respond_to?(<span class="symbol">:to_proc</span>)</span><br><span class="line">    singleton_class.send(<span class="symbol">:define_method</span>, name) <span class="keyword">do</span> <span class="params">|*args|</span></span><br><span class="line">      scope = all.scoping &#123; instance_exec(*args, &amp;body) &#125;</span><br><span class="line">      scope = scope.extending(extension) <span class="keyword">if</span> extension</span><br><span class="line"></span><br><span class="line">      scope <span class="params">||</span> all</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    singleton_class.send(<span class="symbol">:define_method</span>, name) <span class="keyword">do</span> <span class="params">|*args|</span></span><br><span class="line">      scope = all.scoping &#123; body.call(*args) &#125;</span><br><span class="line">      scope = scope.extending(extension) <span class="keyword">if</span> extension</span><br><span class="line"></span><br><span class="line">      scope <span class="params">||</span> all</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  private</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">valid_scope_name?</span><span class="params">(name)</span></span></span><br><span class="line">      <span class="keyword">if</span> respond_to?(name, <span class="literal">true</span>) &amp;&amp; logger</span><br><span class="line">        logger.warn <span class="string">&quot;Creating scope :<span class="subst">#&#123;name&#125;</span>. &quot;</span> \</span><br><span class="line">          <span class="string">&quot;Overwriting existing method <span class="subst">#&#123;<span class="keyword">self</span>.name&#125;</span>.<span class="subst">#&#123;name&#125;</span>.&quot;</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>我们可以看到<code>scope</code>接收3个参数，比我们猜想的多了个<code>block</code>。先不管我们继续向下看，</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unless</span> body.respond_to?(<span class="symbol">:call</span>)</span><br><span class="line">    raise ArgumentError, <span class="string">&quot;The scope body needs to be callable.&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> dangerous_class_method?(name)</span><br><span class="line">    raise ArgumentError, <span class="string">&quot;You tried to define a scope named \&quot;<span class="subst">#&#123;name&#125;</span>\&quot; &quot;</span> \</span><br><span class="line">      <span class="string">&quot;on the model \&quot;<span class="subst">#&#123;<span class="keyword">self</span>.name&#125;</span>\&quot;, but Active Record already defined &quot;</span> \</span><br><span class="line">      <span class="string">&quot;a class method with the same name.&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>这两段语句是检查传入参数的合法性。<br><code>valid_scope_name?(name)</code>这句是当传入的<code>name</code>和类中已经存在的类方法名称一样的时候会提示<code>Overwriting existing method</code></p><p>下面这段代码才是<code>scope</code>实现的核心代码</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> body.respond_to?(<span class="symbol">:to_proc</span>)</span><br><span class="line">  singleton_class.send(<span class="symbol">:define_method</span>, name) <span class="keyword">do</span> <span class="params">|*args|</span></span><br><span class="line">    scope = all.scoping &#123; instance_exec(*args, &amp;body) &#125;</span><br><span class="line">    scope = scope.extending(extension) <span class="keyword">if</span> extension</span><br><span class="line"></span><br><span class="line">    scope <span class="params">||</span> all</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  singleton_class.send(<span class="symbol">:define_method</span>, name) <span class="keyword">do</span> <span class="params">|*args|</span></span><br><span class="line">    scope = all.scoping &#123; body.call(*args) &#125;</span><br><span class="line">    scope = scope.extending(extension) <span class="keyword">if</span> extension</span><br><span class="line"></span><br><span class="line">    scope <span class="params">||</span> all</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>最外层<code>if</code>把<code>body</code>参数两种类型的情况分开处理，第一种是<code>body</code>参数可以响应<code>to_proc</code>方法,这里使用了<code>singleton_class</code>方法获取了当前类的<code>单例类</code>。并通过<code>动态派发</code>调用<code>define_methd</code>方法定义了一个单例方法(这里也就是类方法),同时使用了<code>instance_exec</code>执行了方法体,并且如果存在<code>extension</code>就通过<code>extending</code>方法增强<code>scope</code>，<code>if</code>的另一个分支解决了无法响应<code>to_proc</code>方法的情况(<del>我没有明白为何这里要处理这种情况，ruby里面的callable对象不是都可以响应<code>to_proc</code>方法吗?</del>)，使用了<code>body.call(*args)</code>调用了方法体。两个分支最后都返回了<code>scope</code>以保证<code>链式调用</code>。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;scope的用法&quot;&gt;&lt;a href=&quot;#scope的用法&quot; class=&quot;headerlink&quot; title=&quot;scope的用法&quot;&gt;&lt;/a&gt;scope的用法&lt;/h1&gt;&lt;p&gt;&lt;code&gt;scope&lt;/code&gt;是我们在&lt;code&gt;rails&lt;/code&gt;应用中简化代码的一个重要的工具。比如我们有个&lt;code&gt;Post&lt;/code&gt;模型，这个模型有个&lt;code&gt;published&lt;/code&gt;的布尔类型的字段用来区分文章是否发布。当我们需要查询所有的已发布文章的集合时候，我们首先想到的是这样写：&lt;/p&gt;</summary>
    
    
    
    <category term="Ruby" scheme="http://narutohinata.github.io/categories/Ruby/"/>
    
    
    <category term="Rails" scheme="http://narutohinata.github.io/tags/Rails/"/>
    
  </entry>
  
  <entry>
    <title>Module的include和extend的区别</title>
    <link href="http://narutohinata.github.io/2016/11/06/Module%E7%9A%84include%E5%92%8Cextend%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://narutohinata.github.io/2016/11/06/Module%E7%9A%84include%E5%92%8Cextend%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2016-11-06T08:57:05.000Z</published>
    <updated>2022-01-01T15:45:04.155Z</updated>
    
    <content type="html"><![CDATA[<p>在<code>ruby</code>中我们经常用<code>Module</code>来扩展类的功能，我们常常看到这样的代码：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Sayable</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">say</span></span></span><br><span class="line">    puts <span class="string">&quot;hello&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span></span><br><span class="line">  extend  Sayable</span><br><span class="line">  <span class="keyword">include</span> Sayable</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>我们看到我们在这里分别使用了<code>extend</code>和<code>include</code>,那么<code>extend</code>和<code>include</code>有什么区别呢？我们接下来实验一下：<br>我们先定义一个<code>module</code>,然后定义两个类分别使用<code>extend</code>和<code>include</code>，然后看看这个两个类的扩展有啥区别。</p><span id="more"></span><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Testable</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test</span></span></span><br><span class="line">    puts <span class="string">&quot;test&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line">  extend Testable</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line">  <span class="keyword">include</span> Testable</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">A.test <span class="comment"># test</span></span><br><span class="line">A.new.test <span class="comment"># NoMethodError: private method `test&#x27; called for #&lt;A:0x007f9528d33b40&gt;</span></span><br><span class="line"></span><br><span class="line">B.test <span class="comment"># NoMethodError: private method `test&#x27; called for B:Class</span></span><br><span class="line">B.new.test  <span class="comment"># test</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看到上面的实验结果我们知道当我们<code>extend</code>一个模块的时候，这个模块的所有方法会变成<code>扩展类</code>的<code>类方法</code>，而当我们<code>include</code>一个模块的时候，这个模块的所有方法会变成<code>扩展类</code>的<code>实例方法</code>。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在&lt;code&gt;ruby&lt;/code&gt;中我们经常用&lt;code&gt;Module&lt;/code&gt;来扩展类的功能，我们常常看到这样的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Sayable&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;say&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    puts &lt;span class=&quot;string&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;People&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  extend  Sayable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; Sayable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们看到我们在这里分别使用了&lt;code&gt;extend&lt;/code&gt;和&lt;code&gt;include&lt;/code&gt;,那么&lt;code&gt;extend&lt;/code&gt;和&lt;code&gt;include&lt;/code&gt;有什么区别呢？我们接下来实验一下：&lt;br&gt;我们先定义一个&lt;code&gt;module&lt;/code&gt;,然后定义两个类分别使用&lt;code&gt;extend&lt;/code&gt;和&lt;code&gt;include&lt;/code&gt;，然后看看这个两个类的扩展有啥区别。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>RSpec Expectations</title>
    <link href="http://narutohinata.github.io/2016/11/01/Rspec/"/>
    <id>http://narutohinata.github.io/2016/11/01/Rspec/</id>
    <published>2016-11-01T11:11:11.000Z</published>
    <updated>2022-01-01T15:45:04.155Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RSpec-Expectations-3-6"><a href="#RSpec-Expectations-3-6" class="headerlink" title="RSpec Expectations 3.6"></a>RSpec Expectations 3.6</h1><p><code>rspec expectations</code> 是被用来定义预期的结果的。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Rspec.describe Account <span class="keyword">do</span></span><br><span class="line">  it <span class="string">&quot;has a balance of zero when first creare&quot;</span> <span class="keyword">do</span></span><br><span class="line">    expect(Account.new.balance).to eq(Money.new(<span class="number">0</span>))</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><p><code>rspec expectation</code> 的基本结构是:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">expect(actual).to matcher(expected)</span><br><span class="line">expect(actual).no_to matcher(expected)</span><br></pre></td></tr></table></figure><p>注意：你同样也可以使用<code>expect(..).to_not</code> 代替<code>expect(..).not_to</code>。这个就是它的别名，所以你可以使用你认为读起来更好的那一个。</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">expect(<span class="number">5</span>).to eq(<span class="number">5</span>)</span><br><span class="line">expect(<span class="number">5</span>).not_to eq(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h3 id="matcher-是什么"><a href="#matcher-是什么" class="headerlink" title="matcher 是什么"></a>matcher 是什么</h3><p><code>matcher</code>是可以响应下面方法的任何一个对象：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">matcher?(actual)</span><br><span class="line">failure_message</span><br></pre></td></tr></table></figure><p>这些方法们也是matcher协议的一部分，但是是可选的：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">does_not_match?(actual)</span><br><span class="line">failure_message_when_negated</span><br><span class="line">description</span><br><span class="line">supports_block_expectations?</span><br></pre></td></tr></table></figure><p><code>Rspec</code>附带的一些内建的<code>matchers</code>和用来写定制化<code>mathcers</code>的<code>DLS</code></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;RSpec-Expectations-3-6&quot;&gt;&lt;a href=&quot;#RSpec-Expectations-3-6&quot; class=&quot;headerlink&quot; title=&quot;RSpec Expectations 3.6&quot;&gt;&lt;/a&gt;RSpec Expectations 3.6&lt;/h1&gt;&lt;p&gt;&lt;code&gt;rspec expectations&lt;/code&gt; 是被用来定义预期的结果的。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Rspec.describe Account &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  it &lt;span class=&quot;string&quot;&gt;&amp;quot;has a balance of zero when first creare&amp;quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    expect(Account.new.balance).to eq(Money.new(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Ruby中数组的操作</title>
    <link href="http://narutohinata.github.io/2016/09/21/Ruby%E4%B8%AD%E6%95%B0%E7%BB%84%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
    <id>http://narutohinata.github.io/2016/09/21/Ruby%E4%B8%AD%E6%95%B0%E7%BB%84%E7%9A%84%E6%93%8D%E4%BD%9C/</id>
    <published>2016-09-21T09:26:15.000Z</published>
    <updated>2022-01-01T15:45:04.155Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建并打印数组</span></span><br><span class="line">array = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>]</span><br><span class="line">p array <span class="comment"># =&gt; [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]</span></span><br><span class="line">p array[<span class="number">1</span>] <span class="comment"># =&gt; &quot;two&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加数组元素</span></span><br><span class="line"><span class="comment"># 我们可以这样的</span></span><br><span class="line">array &lt;&lt; [<span class="string">&quot;four&quot;</span>]</span><br><span class="line">p array <span class="comment"># =&gt; [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;]</span></span><br><span class="line"><span class="comment"># 还可以这样</span></span><br><span class="line">array.concat([<span class="string">&quot;five&quot;</span>])</span><br><span class="line">p array <span class="comment"># =&gt;  [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数组的数量</span></span><br><span class="line">p array.count <span class="comment"># =&gt; 5</span></span><br><span class="line"><span class="comment"># 获取数组特定元素的数量</span></span><br><span class="line">array &lt;&lt; [<span class="string">&quot;two&quot;</span>] <span class="comment"># =&gt;  [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;, &quot;two&quot;]</span></span><br><span class="line">p array(<span class="string">&quot;two&quot;</span>).cout <span class="comment"># =&gt; 2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空数组</span></span><br><span class="line">array.clear</span><br><span class="line">p array <span class="comment"># =&gt; []</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Ruby的作用域和扁平作用域</title>
    <link href="http://narutohinata.github.io/2016/09/10/Ruby%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E6%89%81%E5%B9%B3%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://narutohinata.github.io/2016/09/10/Ruby%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E6%89%81%E5%B9%B3%E4%BD%9C%E7%94%A8%E5%9F%9F/</id>
    <published>2016-09-10T09:26:15.000Z</published>
    <updated>2022-01-01T15:45:04.155Z</updated>
    
    <content type="html"><![CDATA[<p>在<code>Ruby</code>中的作用域和<code>java</code>不太一样,它没类似<code>java</code>的内部作用域和嵌套作用域,在<code>java</code>中我们可能写出这样的代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// outter.java</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name = <span class="string">&quot;我是Outter的name&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// main.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    Outter outter = <span class="keyword">new</span> Outter();</span><br><span class="line">    outter.<span class="function">new <span class="title">Inner</span><span class="params">()</span>.<span class="title">say</span><span class="params">()</span></span>; <span class="comment">// =&gt; 我是Outter的name</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>我们可以看到上面的<code>Inner</code>的内部类可以访问包裹类<code>Outter</code>的成员变量<code>name</code>,也就说在<code>java</code>中一个作用域可以看到外围作用域的变量。但在<code>ruby</code>这样写显然是不行的，不信？我们可以试试：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outter</span></span></span><br><span class="line">  def <span class="keyword">self</span>.name</span><br><span class="line">    p @name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="variable">@name</span> = <span class="string">&quot;我是Outter的name&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_outter</span></span></span><br><span class="line">      p name</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Outter::Inner.new.say_outter </span><br><span class="line"><span class="comment"># =&gt; NameError: undefined local variable or method `name&#x27; for #&lt;Outter::Inner:0x007fcf111e3a10</span></span><br></pre></td></tr></table></figure><p>我们可以看到我们调用<code>Inner</code>的实例方法<code>say_outter</code>报<code>undefind local variable or method</code>的错误。<br>这是因为在<code>ruby</code>中一个作用域和作用域内的之间是完全分开的(<code>井水不犯河水</code>)。当我们从一个作用域切换到另一个作用域,原先的绑定会被替换成一组新的绑定，我们可以利用<code>Kernel#local_variables</code>方法来验证这一问题。(<code>local_variable</code>方法会打印出当前绑定的名称)</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="number">1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></span><br><span class="line">  v2 = <span class="number">2</span></span><br><span class="line">  local_variables <span class="comment"># =&gt; [:v2]</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">my_method</span></span></span><br><span class="line">    v3 = <span class="number">3</span></span><br><span class="line">    local_variables </span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  local_variables <span class="comment"># =&gt; [:v2]</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">obj = MyClass.new</span><br><span class="line">obj.my_method  <span class="comment"># =&gt; [:v3]</span></span><br><span class="line">obj.my_method  <span class="comment"># =&gt; [:v3]</span></span><br><span class="line">local_variables <span class="comment"># =&gt; [:v1, :obj]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>ruby</code>中在<code>类定义</code>、<code>模块定义</code>、<code>方法定义</code>的时候会切换作用域。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在&lt;code&gt;Ruby&lt;/code&gt;中的作用域和&lt;code&gt;java&lt;/code&gt;不太一样,它没类似&lt;code&gt;java&lt;/code&gt;的内部作用域和嵌套作用域,在&lt;code&gt;java&lt;/code&gt;中我们可能写出这样的代码:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// outter.java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Outter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String name = &lt;span class=&quot;string&quot;&gt;&amp;quot;我是Outter的name&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Inner&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      System.out.println(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// main.java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Outter outter = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Outter();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    outter.&lt;span class=&quot;function&quot;&gt;new &lt;span class=&quot;title&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// =&amp;gt; 我是Outter的name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Ruby里的那些变量</title>
    <link href="http://narutohinata.github.io/2016/09/01/Ruby%E9%87%8C%E7%9A%84%E9%82%A3%E4%BA%9B%E5%8F%98%E9%87%8F/"/>
    <id>http://narutohinata.github.io/2016/09/01/Ruby%E9%87%8C%E7%9A%84%E9%82%A3%E4%BA%9B%E5%8F%98%E9%87%8F/</id>
    <published>2016-09-01T11:11:11.000Z</published>
    <updated>2022-01-01T15:45:04.155Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实例变量-instance-variable"><a href="#实例变量-instance-variable" class="headerlink" title="实例变量(instance variable)"></a>实例变量(instance variable)</h2><p>顾名思义<code>实例变量</code>就是ruby类的实例的变量,是不是听得有些拗口？没关系我们来看代码:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(name)</span></span></span><br><span class="line">    <span class="variable">@name</span> = name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p1 = People.new(<span class="string">&quot;小明&quot;</span>)</span><br></pre></td></tr></table></figure><p>这里我们可以看到我在<code>People</code>类的初始化方法中传入name参数,然后把参数的值赋给<code>@name</code>变量，这个<code>@name</code>变量就是我们所称的<code>实例变量</code>。而且这些变量是存在于实例的本身的,如下图所示：<br><img src="http://o9dxmww0x.bkt.clouddn.com/ruby_instance_variables.png"></p><h4 id="获取实例变量"><a href="#获取实例变量" class="headerlink" title="获取实例变量"></a>获取实例变量</h4><p>我们上面初<code>new</code>了一个<code>People</code>的对象<code>p1</code>,这个对象中含有一个<code>@name</code>的变量。那我们如何获取<code>@name</code>这个变量的值呢？同时我们如何修改这个变量的值呢？</p><span id="more"></span><p>有两种方法：</p><ol><li>我们给类定义两个方法,一个写方法、一个读方法。这种写法类似<code>java</code>里的<code>sets</code>和<code>gets</code>的写法。<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(name)</span></span></span><br><span class="line">    <span class="variable">@name</span> = name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">name</span></span></span><br><span class="line">    @name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">name=</span><span class="params">(name)</span></span></span><br><span class="line">    <span class="variable">@name</span> = name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p1 = People.new(<span class="string">&quot;小明&quot;</span>)</span><br><span class="line">p1.name <span class="comment"># =&gt; 小明</span></span><br><span class="line">p1.name= <span class="string">&quot;小刘&quot;</span></span><br><span class="line">p1.name <span class="comment"># =&gt; 小刘</span></span><br></pre></td></tr></table></figure></li><li>我们可以使用<code>ruby</code>提供的内置的类宏，<code>attr_reader</code>生成写方法、 <code>attr_writer</code>生成读方法、<code>attr_accessor</code>生成这两种方法。<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:name</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(name)</span></span></span><br><span class="line">    <span class="variable">@name</span> = name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p = People.new(<span class="string">&quot;小明&quot;</span>)</span><br><span class="line">p.name <span class="comment"># =&gt; 小明</span></span><br><span class="line">p.name= <span class="string">&quot;小花&quot;</span></span><br><span class="line">p.name <span class="comment"># =&gt; 小花</span></span><br></pre></td></tr></table></figure><h2 id="类实例变量-Class-instance-variable"><a href="#类实例变量-Class-instance-variable" class="headerlink" title="类实例变量(Class instance variable)"></a>类实例变量(Class instance variable)</h2>我们都知道<code>ruby</code>世界里一切都是对象,类也不例外。我们这里的<code>People</code>类也是一个对象，生成它的是<code>Class</code>类。当类作为一个对象的时候，那些适用于对象的规则也适用于类。也就是说当<code>People</code>类当做一个对象的时候，它也有自己的实例变量。这个变量是存在于<code>People</code>类里的。</li></ol>  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span></span><br><span class="line">  <span class="variable">@name</span> = <span class="string">&quot;哈哈&quot;</span></span><br><span class="line">  </span><br><span class="line">  def <span class="keyword">self</span>.name</span><br><span class="line">    @name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">People.name <span class="comment"># =&gt; &quot;哈哈&quot;</span></span><br></pre></td></tr></table></figure><p>  这里类定义的时候<code>self</code>有类本身充当，因此这个实例变量<code>@name</code>属于这个类。<br>  <img src="http://o9dxmww0x.bkt.clouddn.com/QQ20170703-210740@2x.png"></p><h2 id="类变量-Class-Variable"><a href="#类变量-Class-Variable" class="headerlink" title="类变量(Class Variable)"></a>类变量(Class Variable)</h2><p><code>ruby</code>类中还有一种以<code>@@</code>打头的类变量。类变量和类实例变量不同，它可以被子类和类的实例所访问。(这种行为有点类似<code>java</code>里的<code>静态成员变量</code>)</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line">  <span class="variable">@@name</span> = <span class="string">&quot;A&quot;</span></span><br><span class="line"></span><br><span class="line">  def <span class="keyword">self</span>.name</span><br><span class="line">    @@name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">name</span></span></span><br><span class="line">    @@name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &lt; A</span></span><br><span class="line">  def <span class="keyword">self</span>.name</span><br><span class="line">    @@name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">name</span></span></span><br><span class="line">    @@name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">A.name <span class="comment"># =&gt; &quot;A&quot;</span></span><br><span class="line">A.new.name <span class="comment"># =&gt; &quot;A&quot;</span></span><br><span class="line">B.name <span class="comment"># =&gt; &quot;A&quot;</span></span><br><span class="line">B.new.name <span class="comment"># =&gt; &quot;A&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;实例变量-instance-variable&quot;&gt;&lt;a href=&quot;#实例变量-instance-variable&quot; class=&quot;headerlink&quot; title=&quot;实例变量(instance variable)&quot;&gt;&lt;/a&gt;实例变量(instance variable)&lt;/h2&gt;&lt;p&gt;顾名思义&lt;code&gt;实例变量&lt;/code&gt;就是ruby类的实例的变量,是不是听得有些拗口？没关系我们来看代码:&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;People&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@name&lt;/span&gt; = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p1 = People.new(&lt;span class=&quot;string&quot;&gt;&amp;quot;小明&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里我们可以看到我在&lt;code&gt;People&lt;/code&gt;类的初始化方法中传入name参数,然后把参数的值赋给&lt;code&gt;@name&lt;/code&gt;变量，这个&lt;code&gt;@name&lt;/code&gt;变量就是我们所称的&lt;code&gt;实例变量&lt;/code&gt;。而且这些变量是存在于实例的本身的,如下图所示：&lt;br&gt;&lt;img src=&quot;http://o9dxmww0x.bkt.clouddn.com/ruby_instance_variables.png&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;获取实例变量&quot;&gt;&lt;a href=&quot;#获取实例变量&quot; class=&quot;headerlink&quot; title=&quot;获取实例变量&quot;&gt;&lt;/a&gt;获取实例变量&lt;/h4&gt;&lt;p&gt;我们上面初&lt;code&gt;new&lt;/code&gt;了一个&lt;code&gt;People&lt;/code&gt;的对象&lt;code&gt;p1&lt;/code&gt;,这个对象中含有一个&lt;code&gt;@name&lt;/code&gt;的变量。那我们如何获取&lt;code&gt;@name&lt;/code&gt;这个变量的值呢？同时我们如何修改这个变量的值呢？&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
